#!/usr/bin/env python3
"""
<<<<<<< Updated upstream
Enhanced LINE Bot Demo - M1, M2, M3 Integrated Analysis
Comprehensive demo with multiple dementia analysis modules
"""

from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import JSONResponse
import requests
import os
import logging
import traceback
import json
from typing import Optional, Dict, Any
from datetime import datetime

# Import all modules
=======
Enhanced LINE Bot Demo Backend API
Êï¥Âêà M1+M2+M3 Ê®°ÁµÑÁöÑÂæåÁ´Ø API ÊúçÂãô
"""

import os
import logging
from datetime import datetime
from typing import Dict, Any, Optional
from fastapi import FastAPI, HTTPException, Request
from pydantic import BaseModel
import uvicorn
import json

# Ë®≠ÂÆöÊó•Ë™å
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Â∞éÂÖ•Ê®°ÁµÑ
>>>>>>> Stashed changes
try:
    from xai_flex.m1_enhanced_visualization import M1EnhancedVisualizationGenerator, WarningLevel
    from modules.m2_progression_matrix import M2ProgressionMatrixModule
    from modules.m3_bpsd_classification import M3BPSDClassificationModule
    ALL_MODULES_AVAILABLE = True
except ImportError as e:
    ALL_MODULES_AVAILABLE = False
<<<<<<< Updated upstream
    print(f"‚ö†Ô∏è Some modules not available: {e}")

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Create FastAPI app
app = FastAPI(
    title="Enhanced LINE Bot Demo - M1+M2+M3 Integration",
    description="Comprehensive dementia analysis with multiple modules",
    version="4.0.0"
)

# Initialize all modules
=======
    logger.warning(f"‚ö†Ô∏è ÈÉ®ÂàÜÊ®°ÁµÑÁÑ°Ê≥ïÂ∞éÂÖ•: {e}")

# FastAPI ÊáâÁî®
app = FastAPI(
    title="Enhanced LINE Bot Demo API",
    description="Êï¥Âêà M1+M2+M3 Ê®°ÁµÑÁöÑÂ§±Êô∫ÁóáÂàÜÊûê API",
    version="2.0.0"
)

# ÂàùÂßãÂåñÊ®°ÁµÑ
>>>>>>> Stashed changes
m1_generator = None
m2_module = None
m3_module = None

if ALL_MODULES_AVAILABLE:
    try:
        m1_generator = M1EnhancedVisualizationGenerator()
        m2_module = M2ProgressionMatrixModule()
        m3_module = M3BPSDClassificationModule()
<<<<<<< Updated upstream
        logger.info("‚úÖ All modules (M1, M2, M3) initialized successfully")
    except Exception as e:
        logger.error(f"‚ùå Module initialization failed: {e}")

# Simple fallback generators
class SimpleM1Generator:
    """Simple M1 generator for demo"""
    
    def generate_m1_flex_message(self, analysis_result: dict) -> dict:
        """Generate simple M1 Flex Message"""
        try:
            confidence_score = analysis_result.get('confidence_score', 0.0)
            comparison_data = analysis_result.get('comparison_data', {})
            key_finding = analysis_result.get('key_finding', '')
            warning_level = analysis_result.get('warning_level', 'normal')
            
            confidence_percentage = int(confidence_score * 100)
            confidence_color = "#4CAF50" if confidence_percentage > 80 else "#2196F3" if confidence_percentage > 50 else "#FF9800"
=======
        logger.info("‚úÖ ÊâÄÊúâÊ®°ÁµÑ (M1, M2, M3) ÂàùÂßãÂåñÊàêÂäü")
    except Exception as e:
        logger.error(f"‚ùå Ê®°ÁµÑÂàùÂßãÂåñÂ§±Êïó: {e}")

# Á∞°ÂåñÁöÑ M1 ÁîüÊàêÂô®ÔºàÂÇôÁî®Ôºâ
class SimpleM1Generator:
    def generate_m1_flex_message(self, analysis_data: Dict[str, Any]) -> Dict[str, Any]:
        """ÁîüÊàêÁ∞°ÂåñÁöÑ M1 Flex Message"""
        try:
            confidence_score = analysis_data.get('confidence_score', 0.85)
            comparison_data = analysis_data.get('comparison_data', {})
            key_finding = analysis_data.get('key_finding', 'ËßÄÂØüÂà∞Áõ∏ÈóúÁóáÁãÄÔºåÂª∫Ë≠∞ÈÄ≤‰∏ÄÊ≠•Ë©ï‰º∞')
            warning_level = analysis_data.get('warning_level', 'warning')
>>>>>>> Stashed changes
            
            return {
                "type": "flex",
                "alt_text": f"Â§±Êô∫ÁÖßË≠∑ÂàÜÊûêÔºö{key_finding}",
                "contents": {
                    "type": "bubble",
                    "size": "mega",
                    "header": {
                        "type": "box",
                        "layout": "vertical",
                        "backgroundColor": "#FFFFFF",
                        "contents": [
<<<<<<< Updated upstream
                            {"type": "text", "text": "AI ÂàÜÊûêÁµêÊûú", "size": "lg", "weight": "bold", "color": "#212121"},
                            {"type": "text", "text": "Ë®òÊÜ∂ÂäõË©ï‰º∞", "size": "sm", "color": "#666666", "margin": "sm"}
=======
                            {
                                "type": "text",
                                "text": "AI ÂàÜÊûêÁµêÊûú",
                                "size": "lg",
                                "weight": "bold",
                                "color": "#212121"
                            },
                            {
                                "type": "text",
                                "text": "Ë®òÊÜ∂ÂäõË©ï‰º∞",
                                "size": "sm",
                                "color": "#666666",
                                "margin": "sm"
                            }
>>>>>>> Stashed changes
                        ]
                    },
                    "body": {
                        "type": "box",
                        "layout": "vertical",
                        "backgroundColor": "#F5F5F5",
                        "contents": [
                            {
                                "type": "box",
                                "layout": "vertical",
                                "contents": [
<<<<<<< Updated upstream
                                    {"type": "text", "text": f"AI ‰ø°ÂøÉÂ∫¶ {confidence_percentage}%", "size": "xs", "color": "#666666", "margin": "sm"},
=======
                                    {
                                        "type": "text",
                                        "text": f"AI ‰ø°ÂøÉÂ∫¶ {int(confidence_score * 100)}%",
                                        "size": "xs",
                                        "color": "#666666",
                                        "margin": "sm"
                                    },
>>>>>>> Stashed changes
                                    {
                                        "type": "box",
                                        "layout": "horizontal",
                                        "backgroundColor": "#F0F0F0",
                                        "height": "8px",
                                        "cornerRadius": "4px",
                                        "contents": [
                                            {
                                                "type": "box",
                                                "layout": "vertical",
<<<<<<< Updated upstream
                                                "backgroundColor": confidence_color,
                                                "width": f"{confidence_percentage}%",
=======
                                                "backgroundColor": "#4CAF50",
                                                "width": f"{int(confidence_score * 100)}%",
>>>>>>> Stashed changes
                                                "cornerRadius": "4px",
                                                "contents": []
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "type": "box",
                                "layout": "horizontal",
                                "contents": [
                                    {
                                        "type": "box",
                                        "layout": "vertical",
                                        "backgroundColor": "#E8F5E9",
                                        "cornerRadius": "8px",
                                        "paddingAll": "16px",
                                        "margin": "sm",
                                        "contents": [
                                            {
                                                "type": "box",
                                                "layout": "horizontal",
                                                "contents": [
<<<<<<< Updated upstream
                                                    {"type": "text", "text": "üë¥", "size": "lg", "flex": 0},
                                                    {"type": "text", "text": "Ê≠£Â∏∏ËÄÅÂåñ", "size": "sm", "weight": "bold", "color": "#212121", "flex": 1, "margin": "sm"}
                                                ]
                                            },
                                            {"type": "text", "text": comparison_data.get('normal_aging', ''), "size": "xs", "color": "#666666", "wrap": True, "margin": "sm"}
=======
                                                    {
                                                        "type": "text",
                                                        "text": "üë¥",
                                                        "size": "lg",
                                                        "flex": 0
                                                    },
                                                    {
                                                        "type": "text",
                                                        "text": "Ê≠£Â∏∏ËÄÅÂåñ",
                                                        "size": "sm",
                                                        "weight": "bold",
                                                        "color": "#212121",
                                                        "flex": 1,
                                                        "margin": "sm"
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "text",
                                                "text": comparison_data.get('normal_aging', 'ÂÅ∂ÁàæÂøòË®ò‰ΩÜËÉΩÂõûÊÉ≥Ëµ∑‰æÜ'),
                                                "size": "xs",
                                                "color": "#666666",
                                                "wrap": True,
                                                "margin": "sm"
                                            }
>>>>>>> Stashed changes
                                        ]
                                    },
                                    {
                                        "type": "box",
                                        "layout": "vertical",
                                        "backgroundColor": "#FFF3E0",
                                        "cornerRadius": "8px",
                                        "paddingAll": "16px",
                                        "margin": "sm",
                                        "contents": [
                                            {
                                                "type": "box",
                                                "layout": "horizontal",
                                                "contents": [
<<<<<<< Updated upstream
                                                    {"type": "text", "text": "‚ö†Ô∏è", "size": "lg", "flex": 0},
                                                    {"type": "text", "text": "Â§±Êô∫Ë≠¶Ë®ä", "size": "sm", "weight": "bold", "color": "#212121", "flex": 1, "margin": "sm"}
                                                ]
                                            },
                                            {"type": "text", "text": comparison_data.get('dementia_warning', ''), "size": "xs", "color": "#666666", "wrap": True, "margin": "sm"}
=======
                                                    {
                                                        "type": "text",
                                                        "text": "‚ö†Ô∏è",
                                                        "size": "lg",
                                                        "flex": 0
                                                    },
                                                    {
                                                        "type": "text",
                                                        "text": "Â§±Êô∫Ë≠¶Ë®ä",
                                                        "size": "sm",
                                                        "weight": "bold",
                                                        "color": "#212121",
                                                        "flex": 1,
                                                        "margin": "sm"
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "text",
                                                "text": comparison_data.get('dementia_warning', 'Á∂ìÂ∏∏ÂøòË®ò‰∏îÁÑ°Ê≥ïÂõûÊÉ≥'),
                                                "size": "xs",
                                                "color": "#666666",
                                                "wrap": True,
                                                "margin": "sm"
                                            }
>>>>>>> Stashed changes
                                        ]
                                    }
                                ]
                            },
<<<<<<< Updated upstream
                            {"type": "text", "text": f"üí° {key_finding}", "size": "sm", "color": "#2196F3", "wrap": True, "margin": "md"}
=======
                            {
                                "type": "text",
                                "text": f"üí° {key_finding}",
                                "size": "sm",
                                "color": "#2196F3",
                                "wrap": True,
                                "margin": "md"
                            }
>>>>>>> Stashed changes
                        ]
                    },
                    "footer": {
                        "type": "box",
                        "layout": "vertical",
                        "backgroundColor": "#FFFFFF",
                        "contents": [
                            {
                                "type": "button",
<<<<<<< Updated upstream
                                "action": {"type": "postback", "label": "Êü•ÁúãË©≥Á¥∞ÂàÜÊûê", "data": "m1_detail"},
=======
                                "action": {
                                    "type": "postback",
                                    "label": "Êü•ÁúãË©≥Á¥∞ÂàÜÊûê",
                                    "data": "m1_detail"
                                },
>>>>>>> Stashed changes
                                "style": "primary",
                                "height": "44px",
                                "color": "#2196F3",
                                "margin": "sm"
                            }
                        ]
                    }
                },
<<<<<<< Updated upstream
                "analysis_data": {
                    "confidence_score": confidence_score,
                    "comparison_data": comparison_data,
                    "key_finding": key_finding,
                    "warning_level": warning_level
                }
            }
        except Exception as e:
            logger.error(f"M1 Flex Message generation failed: {e}")
            return create_error_response("M1 ÂàÜÊûêÊö´ÊôÇÁÑ°Ê≥ï‰ΩøÁî®")

class SimpleM2Generator:
    """Simple M2 generator for demo"""
    
    def create_progression_card(self, user_input: str, stage_analysis: dict) -> dict:
        """Generate simple M2 progression card"""
        try:
            stage = stage_analysis.get('stage', 'ËºïÂ∫¶')
            confidence = stage_analysis.get('confidence', 0.8)
            symptoms = stage_analysis.get('symptoms', [])
            care_focus = stage_analysis.get('care_focus', [])
            
            return {
                "type": "flex",
                "alt_text": f"ÁóÖÁ®ãÈöéÊÆµÂàÜÊûêÔºö{stage}ÈöéÊÆµ",
=======
                "analysis_data": analysis_data
            }
        except Exception as e:
            logger.error(f"M1 Flex Message ÁîüÊàêÂ§±Êïó: {e}")
            return create_error_response("M1 ÂàÜÊûêÂ§±Êïó")

# Á∞°ÂåñÁöÑ M2 ÁîüÊàêÂô®
class SimpleM2Generator:
    def create_progression_card(self, text: str, analysis: Dict[str, Any]) -> Dict[str, Any]:
        """ÁîüÊàêÁ∞°ÂåñÁöÑ M2 ÈÄ≤Á®ãÂç°Áâá"""
        try:
            stage = analysis.get('stage', 'ËºïÂ∫¶')
            confidence = analysis.get('confidence', 0.8)
            care_focus = analysis.get('care_focus', 'Á∂≠ÊåÅÊó•Â∏∏ÁîüÊ¥ªËÉΩÂäõ')
            
            return {
                "type": "flex",
                "alt_text": f"ÁóÖÁ®ãÈöéÊÆµÂàÜÊûêÔºö{stage}",
>>>>>>> Stashed changes
                "contents": {
                    "type": "bubble",
                    "size": "mega",
                    "header": {
                        "type": "box",
                        "layout": "vertical",
                        "backgroundColor": "#FFFFFF",
                        "contents": [
<<<<<<< Updated upstream
                            {"type": "text", "text": "ÁóÖÁ®ãÈöéÊÆµË©ï‰º∞", "size": "lg", "weight": "bold", "color": "#212121"},
                            {"type": "text", "text": f"Ë©ï‰º∞ÁµêÊûúÔºö{stage}", "size": "sm", "color": "#666666", "margin": "sm"}
=======
                            {
                                "type": "text",
                                "text": "ÁóÖÁ®ãÈöéÊÆµÂàÜÊûê",
                                "size": "lg",
                                "weight": "bold",
                                "color": "#212121"
                            },
                            {
                                "type": "text",
                                "text": f"ÈöéÊÆµÔºö{stage}",
                                "size": "sm",
                                "color": "#666666",
                                "margin": "sm"
                            }
>>>>>>> Stashed changes
                        ]
                    },
                    "body": {
                        "type": "box",
                        "layout": "vertical",
                        "backgroundColor": "#F5F5F5",
                        "contents": [
                            {
                                "type": "text",
                                "text": f"‰ø°ÂøÉÂ∫¶Ôºö{int(confidence * 100)}%",
                                "size": "sm",
                                "color": "#666666",
                                "margin": "sm"
                            },
                            {
                                "type": "text",
<<<<<<< Updated upstream
                                "text": "‰∏ªË¶ÅÁóáÁãÄÔºö",
                                "size": "sm",
                                "weight": "bold",
                                "color": "#212121",
                                "margin": "md"
                            },
                            *[{"type": "text", "text": f"‚Ä¢ {symptom}", "size": "xs", "color": "#666666", "wrap": True, "margin": "sm"} for symptom in symptoms[:3]],
                            {
                                "type": "text",
                                "text": "ÁÖßË≠∑ÈáçÈªûÔºö",
                                "size": "sm",
                                "weight": "bold",
                                "color": "#212121",
                                "margin": "md"
                            },
                            *[{"type": "text", "text": f"‚Ä¢ {care}", "size": "xs", "color": "#666666", "wrap": True, "margin": "sm"} for care in care_focus[:3]]
=======
                                "text": f"ÁÖßË≠∑ÈáçÈªûÔºö{care_focus}",
                                "size": "sm",
                                "color": "#2196F3",
                                "wrap": True,
                                "margin": "md"
                            }
>>>>>>> Stashed changes
                        ]
                    }
                }
            }
        except Exception as e:
<<<<<<< Updated upstream
            logger.error(f"M2 progression card generation failed: {e}")
            return create_error_response("M2 ÂàÜÊûêÊö´ÊôÇÁÑ°Ê≥ï‰ΩøÁî®")

class SimpleM3Generator:
    """Simple M3 generator for demo"""
    
    def create_bpsd_card(self, user_input: str, bpsd_analysis: dict) -> dict:
        """Generate simple M3 BPSD card"""
        try:
            category = bpsd_analysis.get('category', '‰∏ÄËà¨ÁóáÁãÄ')
            severity = bpsd_analysis.get('severity', 'ËºïÂ∫¶')
            symptoms = bpsd_analysis.get('symptoms', [])
            interventions = bpsd_analysis.get('interventions', [])
            
            return {
                "type": "flex",
                "alt_text": f"Ë°åÁÇ∫ÂøÉÁêÜÁóáÁãÄÂàÜÊûêÔºö{category}",
=======
            logger.error(f"M2 Âç°ÁâáÁîüÊàêÂ§±Êïó: {e}")
            return create_error_response("M2 ÂàÜÊûêÂ§±Êïó")

# Á∞°ÂåñÁöÑ M3 ÁîüÊàêÂô®
class SimpleM3Generator:
    def create_bpsd_card(self, text: str, analysis: Dict[str, Any]) -> Dict[str, Any]:
        """ÁîüÊàêÁ∞°ÂåñÁöÑ M3 BPSD Âç°Áâá"""
        try:
            symptoms = analysis.get('symptoms', ['ÊÉÖÁ∑í‰∏çÁ©©'])
            interventions = analysis.get('interventions', ['Áí∞Â¢ÉË™øÊï¥'])
            
            return {
                "type": "flex",
                "alt_text": "BPSD Ë°åÁÇ∫ÂøÉÁêÜÁóáÁãÄÂàÜÊûê",
>>>>>>> Stashed changes
                "contents": {
                    "type": "bubble",
                    "size": "mega",
                    "header": {
                        "type": "box",
                        "layout": "vertical",
                        "backgroundColor": "#FFFFFF",
                        "contents": [
<<<<<<< Updated upstream
                            {"type": "text", "text": "Ë°åÁÇ∫ÂøÉÁêÜÁóáÁãÄÂàÜÊûê", "size": "lg", "weight": "bold", "color": "#212121"},
                            {"type": "text", "text": f"ÂàÜÈ°ûÔºö{category} ({severity})", "size": "sm", "color": "#666666", "margin": "sm"}
=======
                            {
                                "type": "text",
                                "text": "BPSD ÁóáÁãÄÂàÜÊûê",
                                "size": "lg",
                                "weight": "bold",
                                "color": "#212121"
                            }
>>>>>>> Stashed changes
                        ]
                    },
                    "body": {
                        "type": "box",
                        "layout": "vertical",
                        "backgroundColor": "#F5F5F5",
                        "contents": [
                            {
                                "type": "text",
<<<<<<< Updated upstream
                                "text": "ËßÄÂØüÁóáÁãÄÔºö",
                                "size": "sm",
                                "weight": "bold",
                                "color": "#212121",
                                "margin": "sm"
                            },
                            *[{"type": "text", "text": f"‚Ä¢ {symptom}", "size": "xs", "color": "#666666", "wrap": True, "margin": "sm"} for symptom in symptoms[:3]],
                            {
                                "type": "text",
                                "text": "ËôïÁêÜÂª∫Ë≠∞Ôºö",
                                "size": "sm",
                                "weight": "bold",
                                "color": "#212121",
                                "margin": "md"
                            },
                            *[{"type": "text", "text": f"‚Ä¢ {intervention}", "size": "xs", "color": "#666666", "wrap": True, "margin": "sm"} for intervention in interventions[:3]]
=======
                                "text": f"‰∏ªË¶ÅÁóáÁãÄÔºö{', '.join(symptoms)}",
                                "size": "sm",
                                "color": "#666666",
                                "wrap": True,
                                "margin": "sm"
                            },
                            {
                                "type": "text",
                                "text": f"Âª∫Ë≠∞‰ªãÂÖ•Ôºö{', '.join(interventions)}",
                                "size": "sm",
                                "color": "#2196F3",
                                "wrap": True,
                                "margin": "md"
                            }
>>>>>>> Stashed changes
                        ]
                    }
                }
            }
        except Exception as e:
<<<<<<< Updated upstream
            logger.error(f"M3 BPSD card generation failed: {e}")
            return create_error_response("M3 ÂàÜÊûêÊö´ÊôÇÁÑ°Ê≥ï‰ΩøÁî®")

def create_error_response(message: str) -> dict:
    """Create error response"""
=======
            logger.error(f"M3 Âç°ÁâáÁîüÊàêÂ§±Êïó: {e}")
            return create_error_response("M3 ÂàÜÊûêÂ§±Êïó")

def create_error_response(message: str) -> Dict[str, Any]:
    """ÂâµÂª∫ÈåØË™§ÂõûÊáâ"""
>>>>>>> Stashed changes
    return {
        "type": "flex",
        "alt_text": message,
        "contents": {
            "type": "bubble",
            "body": {
                "type": "box",
                "layout": "vertical",
                "contents": [
<<<<<<< Updated upstream
                    {"type": "text", "text": "‚ö†Ô∏è Êö´ÊôÇÁÑ°Ê≥ïÂàÜÊûê", "size": "lg", "weight": "bold", "color": "#FF9800"},
                    {"type": "text", "text": "Ë´ãÁ®çÂæåÂÜçË©¶", "size": "sm", "color": "#666666", "margin": "sm"}
=======
                    {
                        "type": "text",
                        "text": "‚ö†Ô∏è Êö´ÊôÇÁÑ°Ê≥ïÂàÜÊûê",
                        "size": "lg",
                        "weight": "bold",
                        "color": "#FF9800"
                    },
                    {
                        "type": "text",
                        "text": "Ë´ãÁ®çÂæåÂÜçË©¶",
                        "size": "sm",
                        "color": "#666666",
                        "margin": "sm"
                    }
>>>>>>> Stashed changes
                ]
            }
        }
    }

<<<<<<< Updated upstream
def analyze_text_comprehensive(text: str) -> dict:
    """Comprehensive text analysis using all available modules"""
    results = {}
    
    # M1 Analysis (Warning Signs)
    if m1_generator:
        try:
            m1_result = m1_generator.generate_m1_flex_message({
                'confidence_score': 0.85,
                'comparison_data': {
                    'normal_aging': 'ÂÅ∂ÁàæÂøòË®ò‰ΩÜËÉΩÂõûÊÉ≥Ëµ∑‰æÜ',
                    'dementia_warning': 'Á∂ìÂ∏∏ÂøòË®ò‰∏îÁÑ°Ê≥ïÂõûÊÉ≥'
                },
                'key_finding': 'ËßÄÂØüÂà∞Ë®òÊÜ∂ÂäõÁõ∏ÈóúÁóáÁãÄÔºåÂª∫Ë≠∞ÈÄ≤‰∏ÄÊ≠•Ë©ï‰º∞',
                'warning_level': 'warning'
            })
            results['m1'] = m1_result
        except Exception as e:
            logger.error(f"M1 analysis failed: {e}")
            results['m1'] = create_error_response("M1 ÂàÜÊûêÂ§±Êïó")
    
    # M2 Analysis (Progression Stage)
    if m2_module:
        try:
            m2_analysis = m2_module.analyze_progression_stage(text)
            m2_result = m2_module.create_progression_card(text, m2_analysis)
            results['m2'] = m2_result
        except Exception as e:
            logger.error(f"M2 analysis failed: {e}")
            results['m2'] = create_error_response("M2 ÂàÜÊûêÂ§±Êïó")
    
    # M3 Analysis (BPSD)
    if m3_module:
        try:
            m3_analysis = m3_module.analyze_bpsd_symptoms(text)
            m3_result = m3_module.create_bpsd_card(text, m3_analysis)
            results['m3'] = m3_result
        except Exception as e:
            logger.error(f"M3 analysis failed: {e}")
            results['m3'] = create_error_response("M3 ÂàÜÊûêÂ§±Êïó")
    
    return results

@app.get("/")
async def root():
    """Root endpoint"""
    return {
        "message": "Enhanced LINE Bot Demo - M1+M2+M3 Integration",
        "version": "4.0.0",
        "status": "running",
        "modules": {
            "m1": "available" if m1_generator else "unavailable",
            "m2": "available" if m2_module else "unavailable", 
            "m3": "available" if m3_module else "unavailable"
=======
# Pydantic Ê®°Âûã
class MessageRequest(BaseModel):
    text: str
    user_id: str = "demo_user"

class ComprehensiveRequest(BaseModel):
    text: str
    user_id: str = "demo_user"

# API Á´ØÈªû
@app.get("/")
def root():
    return {
        "message": "Enhanced LINE Bot Demo API",
        "version": "2.0.0",
        "status": "running",
        "modules": {
            "M1": "active" if m1_generator else "inactive",
            "M2": "active" if m2_module else "inactive",
            "M3": "active" if m3_module else "inactive"
>>>>>>> Stashed changes
        }
    }

@app.get("/health")
<<<<<<< Updated upstream
async def health_check():
    """Health check endpoint"""
    return {
        "status": "healthy",
        "mode": "enhanced_demo",
=======
def health():
    return {
        "status": "healthy",
        "mode": "demo",
>>>>>>> Stashed changes
        "services": {
            "m1_modules": {"status": "ok" if m1_generator else "error"},
            "m2_modules": {"status": "ok" if m2_module else "error"},
            "m3_modules": {"status": "ok" if m3_module else "error"}
        },
        "timestamp": datetime.now().isoformat()
    }

@app.post("/demo/message")
<<<<<<< Updated upstream
async def demo_message(request: Dict[str, Any]):
    """Demo message endpoint with comprehensive analysis"""
    try:
        text = request.get("text", "")
        user_id = request.get("user_id", "demo_user")
        
        logger.info(f"üë§ Demo message from {user_id}: {text}")
        
        if not text.strip():
            return create_error_response("Ë´ãËº∏ÂÖ•Ë¶ÅÂàÜÊûêÁöÑÂÖßÂÆπ")
        
        # Perform comprehensive analysis
        analysis_results = analyze_text_comprehensive(text)
        
        # Return primary result (M1) with additional data
        primary_result = analysis_results.get('m1', create_error_response("ÂàÜÊûêÂ§±Êïó"))
        primary_result['comprehensive_analysis'] = {
            'm1_available': 'm1' in analysis_results,
            'm2_available': 'm2' in analysis_results,
            'm3_available': 'm3' in analysis_results,
            'total_modules': len(analysis_results)
        }
        
        return primary_result
        
    except Exception as e:
        logger.error(f"Demo message processing failed: {e}")
        return create_error_response("ËôïÁêÜË®äÊÅØÊôÇÁôºÁîüÈåØË™§")

@app.post("/demo/comprehensive")
async def comprehensive_analysis(request: Dict[str, Any]):
    """Comprehensive analysis endpoint returning all module results"""
    try:
        text = request.get("text", "")
        user_id = request.get("user_id", "demo_user")
        
        logger.info(f"üîç Comprehensive analysis for {user_id}: {text}")
        
        if not text.strip():
            return {"error": "Ë´ãËº∏ÂÖ•Ë¶ÅÂàÜÊûêÁöÑÂÖßÂÆπ"}
        
        # Perform comprehensive analysis
        analysis_results = analyze_text_comprehensive(text)
        
        return {
            "status": "success",
            "user_input": text,
            "analysis_results": analysis_results,
            "modules_available": {
                "m1": m1_generator is not None,
                "m2": m2_module is not None,
                "m3": m3_module is not None
            }
        }
        
    except Exception as e:
        logger.error(f"Comprehensive analysis failed: {e}")
        return {"error": "Á∂úÂêàÂàÜÊûêÂ§±Êïó"}

@app.get("/info")
async def bot_info():
    """Bot information endpoint"""
    return {
        "name": "Enhanced LINE Bot Demo",
        "version": "4.0.0",
        "description": "Comprehensive dementia analysis with M1, M2, M3 modules",
        "features": [
            "M1: Warning Signs Analysis",
            "M2: Progression Stage Assessment", 
            "M3: BPSD Classification",
            "Flex Message Visualization",
            "Comprehensive Analysis"
        ],
        "modules": {
            "m1": "available" if m1_generator else "unavailable",
            "m2": "available" if m2_module else "unavailable",
            "m3": "available" if m3_module else "unavailable"
        }
    }

@app.get("/ping")
async def ping():
    """Simple ping endpoint"""
    return {"pong": datetime.now().isoformat()}

@app.post("/test")
async def test_endpoint():
    """Test endpoint"""
    try:
        test_text = "Â™ΩÂ™ΩÊúÄËøëÂ∏∏ÂøòË®òÈóúÁì¶ÊñØÔºåÊÉÖÁ∑í‰πü‰∏çÂ§™Á©©ÂÆö"
        analysis_results = analyze_text_comprehensive(test_text)
        
        return {
            "status": "success",
            "test_results": {
                "m1_test": analysis_results.get('m1', {"error": "M1 test failed"}),
                "m2_test": analysis_results.get('m2', {"error": "M2 test failed"}),
                "m3_test": analysis_results.get('m3', {"error": "M3 test failed"})
            }
        }
    except Exception as e:
        logger.error(f"Test endpoint failed: {e}")
        return {"error": "Ê∏¨Ë©¶Â§±Êïó"}

@app.get("/demo")
async def demo_page():
    """Demo page HTML"""
    return {
        "message": "Enhanced Demo Available",
        "endpoints": {
            "health": "/health",
            "demo_message": "/demo/message",
            "comprehensive": "/demo/comprehensive",
            "test": "/test",
            "info": "/info"
        },
        "usage": "Send POST requests to /demo/message or /demo/comprehensive with JSON body containing 'text' and 'user_id'"
    }

if __name__ == "__main__":
    import uvicorn
=======
def demo_message(request: MessageRequest):
    """Demo Ê∂àÊÅØËôïÁêÜÁ´ØÈªû"""
    logger.info(f"üë§ Demo message from {request.user_id}: {request.text}")
    
    # ‰ΩøÁî® M1 ÂàÜÊûê
    if m1_generator:
        try:
            # Ê®°Êì¨ÂàÜÊûêÊï∏Êìö
            analysis_data = {
                'confidence_score': 0.85,
                'comparison_data': {
                    'normal_aging': 'ÂÅ∂ÁàæÂøòË®ò‰ΩÜËÉΩÂõûÊÉ≥Ëµ∑‰æÜ',
                    'dementia_warning': 'Á∂ìÂ∏∏ÂøòË®ò‰∏îÁÑ°Ê≥ïÂõûÊÉ≥'
                },
                'key_finding': 'ËßÄÂØüÂà∞Ë®òÊÜ∂ÂäõÁõ∏ÈóúÁóáÁãÄÔºåÂª∫Ë≠∞ÈÄ≤‰∏ÄÊ≠•Ë©ï‰º∞',
                'warning_level': 'warning'
            }
            
            result = m1_generator.generate_m1_flex_message(analysis_data)
            return result
        except Exception as e:
            logger.error(f"M1 ÂàÜÊûêÂ§±Êïó: {e}")
            return create_error_response("M1 ÂàÜÊûêÂ§±Êïó")
    else:
        # ‰ΩøÁî®Á∞°ÂåñÁîüÊàêÂô®
        simple_m1 = SimpleM1Generator()
        analysis_data = {
            'confidence_score': 0.85,
            'comparison_data': {
                'normal_aging': 'ÂÅ∂ÁàæÂøòË®ò‰ΩÜËÉΩÂõûÊÉ≥Ëµ∑‰æÜ',
                'dementia_warning': 'Á∂ìÂ∏∏ÂøòË®ò‰∏îÁÑ°Ê≥ïÂõûÊÉ≥'
            },
            'key_finding': 'ËßÄÂØüÂà∞Ë®òÊÜ∂ÂäõÁõ∏ÈóúÁóáÁãÄÔºåÂª∫Ë≠∞ÈÄ≤‰∏ÄÊ≠•Ë©ï‰º∞',
            'warning_level': 'warning'
        }
        return simple_m1.generate_m1_flex_message(analysis_data)

@app.post("/demo/comprehensive")
def comprehensive_analysis(request: ComprehensiveRequest):
    """Á∂úÂêàÂàÜÊûêÁ´ØÈªû"""
    logger.info(f"üîç Comprehensive analysis for {request.user_id}: {request.text}")
    
    results = {}
    
    # M1 ÂàÜÊûê
    if m1_generator:
        try:
            analysis_data = {
                'confidence_score': 0.85,
                'comparison_data': {
                    'normal_aging': 'ÂÅ∂ÁàæÂøòË®ò‰ΩÜËÉΩÂõûÊÉ≥Ëµ∑‰æÜ',
                    'dementia_warning': 'Á∂ìÂ∏∏ÂøòË®ò‰∏îÁÑ°Ê≥ïÂõûÊÉ≥'
                },
                'key_finding': 'ËßÄÂØüÂà∞Ë®òÊÜ∂ÂäõÁõ∏ÈóúÁóáÁãÄÔºåÂª∫Ë≠∞ÈÄ≤‰∏ÄÊ≠•Ë©ï‰º∞',
                'warning_level': 'warning'
            }
            results['m1'] = m1_generator.generate_m1_flex_message(analysis_data)
        except Exception as e:
            logger.error(f"M1 ÂàÜÊûêÂ§±Êïó: {e}")
            results['m1'] = create_error_response("M1 ÂàÜÊûêÂ§±Êïó")
    
    # M2 ÂàÜÊûê
    if m2_module:
        try:
            m2_analysis = m2_module.analyze_progression_stage(request.text)
            results['m2'] = m2_module.create_progression_card(request.text, m2_analysis)
        except Exception as e:
            logger.error(f"M2 ÂàÜÊûêÂ§±Êïó: {e}")
            results['m2'] = create_error_response("M2 ÂàÜÊûêÂ§±Êïó")
    
    # M3 ÂàÜÊûê
    if m3_module:
        try:
            m3_analysis = m3_module.analyze_bpsd_symptoms(request.text)
            results['m3'] = m3_module.create_bpsd_card(request.text, m3_analysis)
        except Exception as e:
            logger.error(f"M3 ÂàÜÊûêÂ§±Êïó: {e}")
            results['m3'] = create_error_response("M3 ÂàÜÊûêÂ§±Êïó")
    
    return results

@app.post("/test")
def test_endpoint():
    """Ê∏¨Ë©¶Á´ØÈªû"""
    if m1_generator:
        try:
            analysis_data = {
                'confidence_score': 0.85,
                'comparison_data': {
                    'normal_aging': 'ÂÅ∂ÁàæÂøòË®ò‰ΩÜËÉΩÂõûÊÉ≥Ëµ∑‰æÜ',
                    'dementia_warning': 'Á∂ìÂ∏∏ÂøòË®ò‰∏îÁÑ°Ê≥ïÂõûÊÉ≥'
                },
                'key_finding': 'ËßÄÂØüÂà∞Ë®òÊÜ∂ÂäõÁõ∏ÈóúÁóáÁãÄÔºåÂª∫Ë≠∞ÈÄ≤‰∏ÄÊ≠•Ë©ï‰º∞',
                'warning_level': 'warning'
            }
            result = m1_generator.generate_m1_flex_message(analysis_data)
            return {"status": "success", "m1_test": result}
        except Exception as e:
            logger.error(f"Ê∏¨Ë©¶Â§±Êïó: {e}")
            return {"status": "error", "message": str(e)}
    else:
        return {"status": "error", "message": "M1 Ê®°ÁµÑÊú™ÂàùÂßãÂåñ"}

@app.get("/info")
def info():
    """Á≥ªÁµ±Ë≥áË®äÁ´ØÈªû"""
    return {
        "name": "Enhanced LINE Bot Demo API",
        "version": "2.0.0",
        "modules": {
            "M1": "active" if m1_generator else "inactive",
            "M2": "active" if m2_module else "inactive",
            "M3": "active" if m3_module else "inactive"
        },
        "endpoints": [
            "GET / - Ê†πÁ´ØÈªû",
            "GET /health - ÂÅ•Â∫∑Ê™¢Êü•",
            "POST /demo/message - Demo Ê∂àÊÅØËôïÁêÜ",
            "POST /demo/comprehensive - Á∂úÂêàÂàÜÊûê",
            "POST /test - Ê∏¨Ë©¶Á´ØÈªû",
            "GET /info - Á≥ªÁµ±Ë≥áË®ä"
        ]
    }

if __name__ == "__main__":
>>>>>>> Stashed changes
    print("üöÄ Starting Enhanced LINE Bot Demo with M1+M2+M3 integration...")
    print("üí° This is a demo mode - no LINE credentials required")
    print("üåê Access demo at: http://localhost:8000/demo")
    print("üîç Comprehensive analysis at: http://localhost:8000/demo/comprehensive")
<<<<<<< Updated upstream
    uvicorn.run(app, host="0.0.0.0", port=8000) 
=======
    
    uvicorn.run(
        app,
        host="0.0.0.0",
        port=8000,
        log_level="info"
    ) 
>>>>>>> Stashed changes
