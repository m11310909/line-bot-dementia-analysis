#!/usr/bin/env python3
"""
‰øÆÂæ©Áâà M1+M2+M3 Êï¥Âêà API
Âü∫ÊñºÊäÄË°ìÊû∂ÊßãÊñáÊ™î‰øÆÂæ© - ‰øÆÂæ© Webhook ÂïèÈ°å
Â¢ûÂº∑ÁâàÔºöÊîØÊè¥ Flex Messages Ë¶ñË¶∫ÂåñÂõûÊáâ
"""

import os
import logging
import asyncio
import json
import hmac
import hashlib
from typing import Any, Dict, List
from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import JSONResponse
from pydantic import BaseModel
import uvicorn
from linebot.v3 import WebhookHandler
from linebot.v3.exceptions import InvalidSignatureError
from linebot.v3.messaging import (
    Configuration, ApiClient, MessagingApi,
    ReplyMessageRequest, TextMessage, FlexMessage
)
from linebot.v3.webhooks import MessageEvent, TextMessageContent
import time
import requests
from datetime import datetime
from dotenv import load_dotenv

# ËºâÂÖ•Áí∞Â¢ÉËÆäÊï∏
load_dotenv()

# ÂàùÂßãÂåñ FastAPI
app = FastAPI(title="Dementia Analysis API", version="1.0.0")

# ÈÖçÁΩÆ LINE Bot
def initialize_line_bot():
    try:
        channel_access_token = os.getenv("LINE_CHANNEL_ACCESS_TOKEN")
        channel_secret = os.getenv("LINE_CHANNEL_SECRET")
        
        print(f"üîç Ê™¢Êü• LINE Bot ÊÜëË≠â:")
        print(f"   Channel Access Token: {'‚úÖ Â∑≤Ë®≠ÁΩÆ' if channel_access_token else '‚ùå Êú™Ë®≠ÁΩÆ'}")
        print(f"   Channel Secret: {'‚úÖ Â∑≤Ë®≠ÁΩÆ' if channel_secret else '‚ùå Êú™Ë®≠ÁΩÆ'}")
        
        if not channel_access_token or not channel_secret:
            print("‚ùå LINE Bot ÊÜëË≠âÊú™Ë®≠ÁΩÆ")
            print("Ë´ãË®≠ÁΩÆ‰ª•‰∏ãÁí∞Â¢ÉËÆäÊï∏:")
            print("   LINE_CHANNEL_ACCESS_TOKEN")
            print("   LINE_CHANNEL_SECRET")
            return None, None
        
        configuration = Configuration(access_token=channel_access_token)
        api_client = ApiClient(configuration)
        messaging_api = MessagingApi(api_client)
        handler = WebhookHandler(channel_secret)
        
        print("‚úÖ LINE Bot ÂàùÂßãÂåñÊàêÂäü")
        return messaging_api, handler
        
    except Exception as e:
        print(f"‚ùå LINE Bot ÂàùÂßãÂåñÂ§±Êïó: {e}")
        return None, None

# ÂÖ®Â±ÄËÆäÊï∏
line_bot_api, handler = initialize_line_bot()

# Ê∏¨Ë©¶Ê®°ÂºèÈÖçÁΩÆ
TEST_MODE = os.getenv("TEST_MODE", "false").lower() == "true"

# ÂàùÂßãÂåñ logger
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Ê™¢Êü•Áí∞Â¢ÉËÆäÊï∏
def check_env_variables():
    """Ê™¢Êü•ÂøÖË¶ÅÁöÑÁí∞Â¢ÉËÆäÊï∏"""
    required_vars = [
        "LINE_CHANNEL_ACCESS_TOKEN",
        "LINE_CHANNEL_SECRET",
        "GEMINI_API_KEY"
    ]
    
    missing_vars = []
    for var in required_vars:
        if not os.getenv(var):
            missing_vars.append(var)
    
    if missing_vars:
        print(f"‚ùå Áº∫Â∞ëÁí∞Â¢ÉËÆäÊï∏: {', '.join(missing_vars)}")
        print("Ë´ãË®≠ÁΩÆ‰ª•‰∏ãÁí∞Â¢ÉËÆäÊï∏:")
        for var in missing_vars:
            print(f"   {var}")
        return False
    
    print("‚úÖ Áí∞Â¢ÉËÆäÊï∏Ê™¢Êü•ÈÄöÈÅé")
    return True

# Flex Message ÁîüÊàêÂáΩÊï∏
def create_flex_message(analysis_result: Dict[str, Any], module_type: str) -> Dict[str, Any]:
    """ÂâµÂª∫ Flex Message ÂõûÊáâ"""
    
    # Ê†πÊìöÊ®°ÁµÑÈ°ûÂûãÈÅ∏ÊìáÈ°èËâ≤
    color_map = {
        "M1": "#FF6B6B",  # Á¥ÖËâ≤ - Ë®òÊÜ∂Âäõ
        "M2": "#4ECDC4",  # ÈùíËâ≤ - ÊÉÖÁ∑í
        "M3": "#45B7D1",  # ËóçËâ≤ - Á©∫Èñì
        "M4": "#96CEB4",  # Á∂†Ëâ≤ - ËààË∂£
        "comprehensive": "#FFA07A"  # Ê©ôËâ≤ - Á∂úÂêà
    }
    
    primary_color = color_map.get(module_type, "#FF6B6B")
    
    # Âæû analysis_result ‰∏≠ÊèêÂèñÊï∏Êìö
    data = analysis_result.get("data", {})
    
    # È¢®Èö™Á≠âÁ¥ö
    risk_level = data.get("risk_level", "medium")
    risk_color_map = {
        "low": "#4CAF50",
        "medium": "#FF9800", 
        "high": "#F44336"
    }
    risk_color = risk_color_map.get(risk_level, "#FF9800")
    
    # Ê†πÊìöÊ®°ÁµÑÈ°ûÂûãÊèêÂèñÁóáÁãÄÂíåÂª∫Ë≠∞
    symptoms = []
    recommendations = []
    
    if module_type == "M1":
        symptoms = data.get("warning_signs", [])
        recommendations = data.get("recommendations", [])
    elif module_type == "M2":
        symptoms = data.get("symptoms", [])
        recommendations = data.get("care_focus", [])
    elif module_type == "M3":
        symptoms = data.get("bpsd_symptoms", [])
        recommendations = data.get("intervention", [])
    elif module_type == "M4":
        symptoms = ["ÁÖßË≠∑Ë≥áÊ∫êË©ï‰º∞"]
        recommendations = data.get("practical_tips", [])
    elif module_type == "comprehensive":
        symptoms = ["Á∂úÂêàÁóáÁãÄË©ï‰º∞"]
        recommendations = data.get("recommendations", [])
    
    symptoms_text = "\n".join([f"‚Ä¢ {symptom}" for symptom in symptoms]) if symptoms else "‚Ä¢ ÈúÄË¶ÅÈÄ≤‰∏ÄÊ≠•Ë©ï‰º∞"
    recommendations_text = "\n".join([f"‚Ä¢ {rec}" for rec in recommendations]) if recommendations else "‚Ä¢ Âª∫Ë≠∞Â∞ãÊ±ÇÂ∞àÊ•≠ÈÜ´ÁôÇÂçîÂä©"
    
    flex_message = {
        "type": "flex",
        "altText": f"Â§±Êô∫ÁóáÂàÜÊûêÁµêÊûú - {module_type}",
        "contents": {
            "type": "bubble",
            "size": "giga",
            "header": {
                "type": "box",
                "layout": "vertical",
                "contents": [
                    {
                        "type": "text",
                        "text": f"üîç {module_type} ÂàÜÊûêÁµêÊûú",
                        "weight": "bold",
                        "size": "lg",
                        "color": "#FFFFFF"
                    },
                    {
                        "type": "text",
                        "text": f"È¢®Èö™Á≠âÁ¥ö: {risk_level.upper()}",
                        "size": "sm",
                        "color": "#FFFFFF",
                        "margin": "sm"
                    }
                ],
                "backgroundColor": primary_color,
                "paddingAll": "20px"
            },
            "body": {
                "type": "box",
                "layout": "vertical",
                "spacing": "md",
                "contents": [
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                            {
                                "type": "text",
                                "text": "üìã ÂèØËÉΩÁóáÁãÄ",
                                "weight": "bold",
                                "size": "md",
                                "margin": "sm"
                            },
                            {
                                "type": "text",
                                "text": symptoms_text,
                                "size": "sm",
                                "color": "#666666",
                                "wrap": True,
                                "margin": "sm"
                            }
                        ]
                    },
                    {
                        "type": "separator",
                        "margin": "lg"
                    },
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                            {
                                "type": "text",
                                "text": "üí° Âª∫Ë≠∞",
                                "weight": "bold",
                                "size": "md",
                                "margin": "sm"
                            },
                            {
                                "type": "text",
                                "text": recommendations_text,
                                "size": "sm",
                                "color": "#666666",
                                "wrap": True,
                                "margin": "sm"
                            }
                        ]
                    }
                ],
                "paddingAll": "20px"
            },
            "footer": {
                "type": "box",
                "layout": "vertical",
                "contents": [
                    {
                        "type": "text",
                        "text": "‚ö†Ô∏è Ê≠§ÂàÜÊûêÂÉÖ‰æõÂèÉËÄÉÔºåË´ãË´ÆË©¢Â∞àÊ•≠ÈÜ´ÁôÇ‰∫∫Âì°",
                        "size": "xs",
                        "color": "#999999",
                        "align": "center",
                        "wrap": True
                    }
                ],
                "paddingAll": "15px"
            }
        }
    }
    
    return flex_message

def create_simple_flex_message(title: str, content: str, color: str = "#FF6B6B") -> Dict[str, Any]:
    """ÂâµÂª∫Á∞°ÂñÆÁöÑ Flex Message"""
    return {
        "type": "flex",
        "altText": title,
        "contents": {
            "type": "bubble",
            "size": "micro",
            "body": {
                "type": "box",
                "layout": "vertical",
                "contents": [
                    {
                        "type": "text",
                        "text": title,
                        "weight": "bold",
                        "size": "lg",
                        "color": "#FFFFFF"
                    },
                    {
                        "type": "text",
                        "text": content,
                        "size": "sm",
                        "color": "#666666",
                        "wrap": True,
                        "margin": "md"
                    }
                ],
                "backgroundColor": color,
                "paddingAll": "20px"
            }
        }
    }

# Ê®°ÂûãÂÆöÁæ©
class UserInput(BaseModel):
    message: str

class AnalysisResponse(BaseModel):
    success: bool
    message: str
    data: Dict[str, Any] = {}

# ÂÅ•Â∫∑Ê™¢Êü•
@app.get("/health")
def health():
    return {
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "version": "1.0.0",
        "line_bot_configured": bool(line_bot_api and handler),
        "test_mode": TEST_MODE
    }

@app.get("/")
def root():
    return {
        "message": "Dementia Analysis API", 
        "status": "running",
        "test_mode": TEST_MODE
    }

def handle_line_message(event: MessageEvent):
    """ËôïÁêÜ LINE Bot Ë®äÊÅØ - ‰ΩøÁî® Flex Messages"""
    try:
        if isinstance(event.message, TextMessageContent):
            user_message = event.message.text
            user_id = event.source.user_id
            
            print(f"üì± Êî∂Âà∞Áî®Êà∂Ë®äÊÅØ: {user_message}")
            print(f"üë§ Áî®Êà∂ ID: {user_id}")
            
            # ÂàÜÊûêÁî®Êà∂Ë®äÊÅØ
            analysis_result = analyze_user_message(user_message)
            print(f"üîç ÂàÜÊûêÁµêÊûú: {analysis_result.get('success', False)}")
            
            # ÁîüÊàê Flex Message ÂõûÊáâ
            flex_message = generate_flex_reply(analysis_result)
            print(f"üé® Flex Message ÁîüÊàêÂÆåÊàê: {flex_message.get('altText', 'N/A')}")
            
            # ÁôºÈÄÅ Flex Message ÂõûÊáâ
            send_line_reply(event.reply_token, "", flex_message)
            
            print(f"‚úÖ Flex Message ÂõûÊáâÂ∑≤ÁôºÈÄÅÁµ¶Áî®Êà∂ {user_id}")
            
    except Exception as e:
        logger.error(f"ËôïÁêÜ LINE Ë®äÊÅØÂ§±Êïó: {e}")
        print(f"‚ùå ËôïÁêÜ LINE Ë®äÊÅØÂ§±Êïó: {e}")
        # ÁôºÈÄÅÈåØË™§ÂõûÊáâ
        try:
            error_flex = create_simple_flex_message(
                "‚ùå Á≥ªÁµ±ÈåØË™§",
                "Êä±Ê≠âÔºåËôïÁêÜÊÇ®ÁöÑË®äÊÅØÊôÇÁôºÁîüÈåØË™§ÔºåË´ãÁ®çÂæåÂÜçË©¶„ÄÇ",
                "#F44336"
            )
            send_line_reply(event.reply_token, "", error_flex)
        except Exception as error_e:
            print(f"‚ùå ÁôºÈÄÅÈåØË™§ÂõûÊáâ‰πüÂ§±Êïó: {error_e}")

def analyze_user_message(user_message: str) -> Dict[str, Any]:
    """ÂàÜÊûêÁî®Êà∂Ë®äÊÅØ"""
    try:
        # Ê†πÊìöË®äÊÅØÂÖßÂÆπÈÅ∏ÊìáÂàÜÊûêÊ®°ÁµÑ
        if any(keyword in user_message for keyword in ["ÂøòË®ò", "Ë®òÊÜ∂", "ÂÅ•Âøò", "ÈáçË§á"]):
            module = "M1"
        elif any(keyword in user_message for keyword in ["Â§±Êô∫", "Ë™çÁü•", "Ë°åÁÇ∫", "ÁóáÁãÄ"]):
            module = "M2"
        elif any(keyword in user_message for keyword in ["Â¶ÑÊÉ≥", "ÂπªË¶∫", "ÊÉÖÁ∑í", "Ë°åÁÇ∫"]):
            module = "M3"
        elif any(keyword in user_message for keyword in ["ÁÖßË≠∑", "Ë≥áÊ∫ê", "ÂçîÂä©", "ÈÜ´ÁôÇ"]):
            module = "M4"
        else:
            module = "comprehensive"
        
        print(f"üîç ÈÅ∏ÊìáÂàÜÊûêÊ®°ÁµÑ: {module}")
        
        # Êú¨Âú∞ÂàÜÊûêÔºàÈÅøÂÖç HTTP Ë´ãÊ±ÇË∂ÖÊôÇÔºâ
        if module == "M1":
            result = {
                "module": "M1",
                "warning_signs": ["Ë®òÊÜ∂ÂäõÊ∏õÈÄÄ", "Ë™ûË®ÄÈöúÁ§ô"],
                "risk_level": "medium",
                "recommendations": ["Âª∫Ë≠∞Â∞±ÈÜ´Ê™¢Êü•", "Ê≥®ÊÑèÂÆâÂÖ®"]
            }
        elif module == "M2":
            result = {
                "module": "M2",
                "progression_stage": "mild",
                "symptoms": ["Ë™çÁü•ÂäüËÉΩ‰∏ãÈôç", "Ë°åÁÇ∫ÊîπËÆä"],
                "care_focus": ["Ë™çÁü•Ë®ìÁ∑¥", "Áí∞Â¢ÉÂÆâÂÖ®"]
            }
        elif module == "M3":
            result = {
                "module": "M3",
                "bpsd_symptoms": ["Â¶ÑÊÉ≥", "ÂπªË¶∫"],
                "intervention": ["Ëó•Áâ©Ê≤ªÁôÇ", "Ë°åÁÇ∫ÁôÇÊ≥ï"],
                "severity": "moderate"
            }
        elif module == "M4":
            result = {
                "module": "M4",
                "care_resources": ["ÈÜ´ÁôÇË≥áÊ∫ê", "ÁÖßË≠∑ÊäÄÂ∑ß"],
                "contact_info": ["ÈÜ´Èô¢ËÅØÁµ°", "Á§æÂ∑•ÂçîÂä©"],
                "practical_tips": ["ÂÆâÂÖ®Áí∞Â¢É", "Ê∫ùÈÄöÊäÄÂ∑ß"]
            }
        else:  # comprehensive
            result = {
                "module": "comprehensive",
                "modules_used": ["M1", "M2", "M3", "M4"],
                "overall_assessment": "ÈúÄË¶ÅÂ∞àÊ•≠ÈÜ´ÁôÇË©ï‰º∞",
                "recommendations": [
                    "Á´ãÂç≥Â∞±ÈÜ´Ê™¢Êü•",
                    "ÂÆâÊéíË™çÁü•ÂäüËÉΩË©ï‰º∞",
                    "ËÄÉÊÖÆËó•Áâ©Ê≤ªÁôÇ",
                    "Âª∫Á´ãÂÆâÂÖ®ÁÖßË≠∑Áí∞Â¢É"
                ],
                "confidence": 0.85
            }
        
        return {
            "success": True,
            "message": f"{module} ÂàÜÊûêÂÆåÊàê",
            "data": result
        }
            
    except Exception as e:
        logger.error(f"ÂàÜÊûêÁî®Êà∂Ë®äÊÅØÂ§±Êïó: {e}")
        return {"success": False, "message": f"ÂàÜÊûêÂ§±Êïó: {str(e)}"}

def send_line_reply(reply_token: str, message: str, flex_message: Dict[str, Any] = None):
    """ÁôºÈÄÅ LINE ÂõûÊáâ - ÊîØÊè¥ Flex Messages"""
    try:
        if TEST_MODE:
            print(f"üß™ Ê∏¨Ë©¶Ê®°Âºè: Ê®°Êì¨ÁôºÈÄÅ LINE ÂõûÊáâ")
            print(f"   ÂõûÊáâ‰ª§Áâå: {reply_token[:20]}...")
            if flex_message:
                print(f"   Ë®äÊÅØÈ°ûÂûã: Flex Message")
                print(f"   Ê®ôÈ°å: {flex_message.get('altText', 'N/A')}")
                print(f"   ÂÖßÂÆπ: {flex_message.get('contents', {}).get('header', {}).get('contents', [{}])[0].get('text', 'N/A')}")
            else:
                print(f"   Ë®äÊÅØÈ°ûÂûã: ÊñáÂ≠óË®äÊÅØ")
                print(f"   Ë®äÊÅØÂÖßÂÆπ: {message[:100]}...")
            print("‚úÖ Ê∏¨Ë©¶Ê®°ÂºèÂõûÊáâÂ∑≤Ë®òÈåÑ")
            return
        
        if line_bot_api and reply_token:
            if flex_message:
                # ÂâµÂª∫ Flex Message - ‰øÆÂæ©ÁâàÊú¨
                from linebot.v3.messaging import FlexMessage
                
                # Á¢∫‰øù contents ÊòØÊ≠£Á¢∫ÁöÑÊ†ºÂºè
                contents = flex_message.get("contents", {})
                if not contents:
                    print("‚ùå Flex Message contents ÁÇ∫Á©∫")
                    return
                
                # È©óË≠â Flex Message ÁµêÊßã
                if contents.get("type") != "bubble":
                    print("‚ùå Flex Message È°ûÂûã‰∏çÊòØ bubble")
                    return
                
                # Ê™¢Êü•ÊòØÂê¶ÊúâÂøÖË¶ÅÁöÑÂçÄÂ°ä
                header = contents.get("header", {})
                body = contents.get("body", {})
                
                if not header or not body:
                    print("‚ùå Flex Message Áº∫Â∞ëÂøÖË¶ÅÁöÑÂçÄÂ°ä")
                    return
                
                flex_msg = FlexMessage(
                    alt_text=flex_message.get("altText", "ÂàÜÊûêÁµêÊûú"),
                    contents=contents
                )
                
                # ÂâµÂª∫ÂõûÊáâË´ãÊ±Ç
                reply_request = ReplyMessageRequest(
                    reply_token=reply_token,
                    messages=[flex_msg]
                )
                
                print(f"üé® ÁôºÈÄÅ Flex Message: {flex_message.get('altText', 'N/A')}")
                print(f"   ÁµêÊßã: {contents.get('type')} - {contents.get('size', 'N/A')}")
                print(f"   Ê®ôÈ°åÂçÄÂ°ä: {'‚úÖ' if header else '‚ùå'}")
                print(f"   ÂÖßÂÆπÂçÄÂ°ä: {'‚úÖ' if body else '‚ùå'}")
            else:
                # ÂâµÂª∫ÊñáÂ≠óË®äÊÅØ
                text_message = TextMessage(text=message)
                
                # ÂâµÂª∫ÂõûÊáâË´ãÊ±Ç
                reply_request = ReplyMessageRequest(
                    reply_token=reply_token,
                    messages=[text_message]
                )
            
            # ÁôºÈÄÅÂõûÊáâ
            line_bot_api.reply_message(reply_request)
            print(f"‚úÖ LINE ÂõûÊáâÂ∑≤ÁôºÈÄÅ")
            
        else:
            print(f"‚ö†Ô∏è ÁÑ°Ê≥ïÁôºÈÄÅ LINE ÂõûÊáâ: {'LINE Bot API Êú™ÂàùÂßãÂåñ' if not line_bot_api else 'ÁÑ°ÊïàÁöÑÂõûÊáâ‰ª§Áâå'}")
            
    except Exception as e:
        logger.error(f"ÁôºÈÄÅ LINE ÂõûÊáâÂ§±Êïó: {e}")
        print(f"‚ùå ÁôºÈÄÅ LINE ÂõûÊáâÂ§±Êïó: {e}")
        
        # Â¶ÇÊûúÊòØ reply token ÈåØË™§ÔºåÊèê‰æõÊõ¥Â§ö‰ø°ÊÅØ
        if "Invalid reply token" in str(e):
            print("üí° ÊèêÁ§∫: reply token Â∑≤ÈÅéÊúüÔºåÈÄôÊòØÊ≠£Â∏∏Ë°åÁÇ∫")
            print("üí° ÊèêÁ§∫: Áî®Êà∂ÈúÄË¶ÅÈáçÊñ∞ÁôºÈÄÅË®äÊÅØ")
        elif "400" in str(e) and "At least one block must be specified" in str(e):
            print("üí° ÊèêÁ§∫: Flex Message ÁµêÊßãÂïèÈ°å")
            print("üí° ÊèêÁ§∫: ÂòóË©¶ÁôºÈÄÅÁ∞°ÂñÆÊñáÂ≠óË®äÊÅØ")
            # ÂòóË©¶ÁôºÈÄÅÁ∞°ÂñÆÁöÑÊñáÂ≠óË®äÊÅØ‰ΩúÁÇ∫ÂÇôÁî®
            try:
                text_message = TextMessage(text="Êä±Ê≠âÔºåÈ°ØÁ§∫ÂàÜÊûêÁµêÊûúÊôÇÁôºÁîüÈåØË™§„ÄÇË´ãÁ®çÂæåÂÜçË©¶„ÄÇ")
                reply_request = ReplyMessageRequest(
                    reply_token=reply_token,
                    messages=[text_message]
                )
                line_bot_api.reply_message(reply_request)
                print("‚úÖ Â∑≤ÁôºÈÄÅÂÇôÁî®ÊñáÂ≠óË®äÊÅØ")
            except Exception as backup_e:
                print(f"‚ùå ÂÇôÁî®Ë®äÊÅØ‰πüÁôºÈÄÅÂ§±Êïó: {backup_e}")
        else:
            print("üí° ÊèêÁ§∫: Ë´ãÊ™¢Êü• LINE Bot ÊÜëË≠âÊòØÂê¶Ê≠£Á¢∫")

def generate_flex_reply(analysis_result: Dict[str, Any]) -> Dict[str, Any]:
    """ÁîüÊàê Flex Message ÂõûÊáâ"""
    try:
        print(f"üé® ÈñãÂßãÁîüÊàê Flex Message...")
        
        if not analysis_result.get("success", False):
            print(f"‚ùå ÂàÜÊûêÂ§±ÊïóÔºåÁîüÊàêÈåØË™§ Flex Message")
            return create_simple_flex_message(
                "‚ùå ÂàÜÊûêÂ§±Êïó",
                "Êä±Ê≠âÔºåÊàëÁÑ°Ê≥ïÂàÜÊûêÊÇ®ÁöÑË®äÊÅØ„ÄÇË´ãÂòóË©¶ÈáçÊñ∞ÊèèËø∞ÊÇ®ÁöÑÊÉÖÊ≥Å„ÄÇ",
                "#F44336"
            )
        
        data = analysis_result.get("data", {})
        module = data.get("module", "comprehensive")
        
        print(f"üéØ ‰ΩøÁî®Ê®°ÁµÑ: {module}")
        
        # ‰ΩøÁî®Êõ¥Á∞°ÂñÆÁöÑ Flex Message ‰æÜÈÅøÂÖçÁµêÊßãÂïèÈ°å
        if module == "M1":
            title = "üîç M1 Ë®òÊÜ∂ÂäõÂàÜÊûêÁµêÊûú"
            content = "Ê†πÊìöÊÇ®ÁöÑÊèèËø∞ÔºåÂèØËÉΩÊ∂âÂèäË®òÊÜ∂ÂäõÊ∏õÈÄÄÁöÑÁóáÁãÄ„ÄÇÂª∫Ë≠∞Ôºö\n‚Ä¢ Á´ãÂç≥Â∞±ÈÜ´Ê™¢Êü•\n‚Ä¢ Ê≥®ÊÑèÂÆâÂÖ®\n‚Ä¢ Âª∫Á´ãÊèêÈÜíÁ≥ªÁµ±"
            color = "#FF6B6B"
        elif module == "M2":
            title = "üîç M2 Ë™çÁü•ÂäüËÉΩÂàÜÊûêÁµêÊûú"
            content = "Ê†πÊìöÊÇ®ÁöÑÊèèËø∞ÔºåÂèØËÉΩÊ∂âÂèäË™çÁü•ÂäüËÉΩ‰∏ãÈôç„ÄÇÂª∫Ë≠∞Ôºö\n‚Ä¢ ÂÆâÊéíË™çÁü•ÂäüËÉΩË©ï‰º∞\n‚Ä¢ ÈÄ≤Ë°åË™çÁü•Ë®ìÁ∑¥\n‚Ä¢ Âª∫Á´ãÂÆâÂÖ®Áí∞Â¢É"
            color = "#4ECDC4"
        elif module == "M3":
            title = "üîç M3 Ë°åÁÇ∫ÁóáÁãÄÂàÜÊûêÁµêÊûú"
            content = "Ê†πÊìöÊÇ®ÁöÑÊèèËø∞ÔºåÂèØËÉΩÊ∂âÂèäË°åÁÇ∫ÁóáÁãÄ„ÄÇÂª∫Ë≠∞Ôºö\n‚Ä¢ Â∞ãÊ±ÇÂ∞àÊ•≠ÈÜ´ÁôÇÂçîÂä©\n‚Ä¢ ËÄÉÊÖÆËó•Áâ©Ê≤ªÁôÇ\n‚Ä¢ Âª∫Á´ãË°åÁÇ∫ÁôÇÊ≥ï"
            color = "#45B7D1"
        else:
            title = "üîç Á∂úÂêàÂàÜÊûêÁµêÊûú"
            content = "Ê†πÊìöÊÇ®ÁöÑÊèèËø∞ÔºåÂª∫Ë≠∞ÈÄ≤Ë°åÁ∂úÂêàË©ï‰º∞„ÄÇÂª∫Ë≠∞Ôºö\n‚Ä¢ Á´ãÂç≥Â∞±ÈÜ´Ê™¢Êü•\n‚Ä¢ ÂÆâÊéíÂ∞àÊ•≠Ë©ï‰º∞\n‚Ä¢ Âª∫Á´ãÁÖßË≠∑Ë®àÂäÉ"
            color = "#FFA07A"
        
        flex_message = create_simple_flex_message(title, content, color)
        print(f"üé® ÁîüÊàêÁ∞°ÂñÆ Flex Message ÊàêÂäü: {module} Ê®°ÁµÑ")
        print(f"   Ê®ôÈ°å: {flex_message.get('altText', 'N/A')}")
        return flex_message
        
    except Exception as e:
        logger.error(f"ÁîüÊàê Flex Message Â§±Êïó: {e}")
        print(f"‚ùå ÁîüÊàê Flex Message Â§±Êïó: {e}")
        return create_simple_flex_message(
            "‚ùå Á≥ªÁµ±ÈåØË™§",
            "Êä±Ê≠âÔºåÁîüÊàêÂõûÊáâÊôÇÁôºÁîüÈåØË™§„ÄÇË´ãÁ®çÂæåÂÜçË©¶„ÄÇ",
            "#F44336"
        )

# Ë®ªÂÜä LINE Bot Ë®äÊÅØËôïÁêÜÂô®
@handler.add(MessageEvent, message=TextMessageContent)
def handle_message(event):
    """ËôïÁêÜ LINE Bot ÊñáÂ≠óË®äÊÅØ"""
    try:
        print(f"üì® ËôïÁêÜ LINE Ë®äÊÅØ‰∫ã‰ª∂")
        print(f"   ‰∫ã‰ª∂È°ûÂûã: {type(event)}")
        print(f"   Ë®äÊÅØÈ°ûÂûã: {type(event.message)}")
        print(f"   Áî®Êà∂ ID: {event.source.user_id}")
        print(f"   Ë®äÊÅØÂÖßÂÆπ: {event.message.text}")
        
        handle_line_message(event)
        
    except Exception as e:
        logger.error(f"ËôïÁêÜ LINE Ë®äÊÅØ‰∫ã‰ª∂Â§±Êïó: {e}")
        print(f"‚ùå ËôïÁêÜË®äÊÅØ‰∫ã‰ª∂Â§±Êïó: {e}")

# ËôïÁêÜÊâÄÊúâË®äÊÅØÈ°ûÂûã
@handler.add(MessageEvent)
def handle_all_messages(event):
    """ËôïÁêÜÊâÄÊúâÈ°ûÂûãÁöÑË®äÊÅØ"""
    try:
        print(f"üì® ËôïÁêÜÊâÄÊúâË®äÊÅØ‰∫ã‰ª∂")
        print(f"   ‰∫ã‰ª∂È°ûÂûã: {type(event)}")
        print(f"   Ë®äÊÅØÈ°ûÂûã: {type(event.message)}")
        
        # Âè™ËôïÁêÜÊñáÂ≠óË®äÊÅØ
        if isinstance(event.message, TextMessageContent):
            handle_line_message(event)
        else:
            print(f"‚ö†Ô∏è ÂøΩÁï•ÈùûÊñáÂ≠óË®äÊÅØ: {type(event.message)}")
            
    except Exception as e:
        logger.error(f"ËôïÁêÜÊâÄÊúâË®äÊÅØ‰∫ã‰ª∂Â§±Êïó: {e}")
        print(f"‚ùå ËôïÁêÜÊâÄÊúâË®äÊÅØ‰∫ã‰ª∂Â§±Êïó: {e}")

# M1 Ê®°ÁµÑÂàÜÊûê
@app.post("/analyze/M1")
def analyze_m1(request: UserInput):
    try:
        # Ê®°Êì¨ M1 ÂàÜÊûê
        result = {
            "module": "M1",
            "warning_signs": ["Ë®òÊÜ∂ÂäõÊ∏õÈÄÄ", "Ë™ûË®ÄÈöúÁ§ô"],
            "risk_level": "medium",
            "recommendations": ["Âª∫Ë≠∞Â∞±ÈÜ´Ê™¢Êü•", "Ê≥®ÊÑèÂÆâÂÖ®"]
        }
        
        return AnalysisResponse(
            success=True,
            message="M1 ÂàÜÊûêÂÆåÊàê",
            data=result
        )
    except Exception as e:
        return AnalysisResponse(
            success=False,
            message=f"M1 ÂàÜÊûêÂ§±Êïó: {str(e)}"
        )

# M2 Ê®°ÁµÑÂàÜÊûê
@app.post("/analyze/M2")
def analyze_m2(request: UserInput):
    try:
        # Ê®°Êì¨ M2 ÂàÜÊûê
        result = {
            "module": "M2",
            "progression_stage": "mild",
            "symptoms": ["Ë™çÁü•ÂäüËÉΩ‰∏ãÈôç", "Ë°åÁÇ∫ÊîπËÆä"],
            "care_focus": ["Ë™çÁü•Ë®ìÁ∑¥", "Áí∞Â¢ÉÂÆâÂÖ®"]
        }
        
        return AnalysisResponse(
            success=True,
            message="M2 ÂàÜÊûêÂÆåÊàê",
            data=result
        )
    except Exception as e:
        return AnalysisResponse(
            success=False,
            message=f"M2 ÂàÜÊûêÂ§±Êïó: {str(e)}"
        )

# M3 Ê®°ÁµÑÂàÜÊûê
@app.post("/analyze/M3")
def analyze_m3(request: UserInput):
    try:
        # Ê®°Êì¨ M3 ÂàÜÊûê
        result = {
            "module": "M3",
            "bpsd_symptoms": ["Â¶ÑÊÉ≥", "ÂπªË¶∫"],
            "intervention": ["Ëó•Áâ©Ê≤ªÁôÇ", "Ë°åÁÇ∫ÁôÇÊ≥ï"],
            "severity": "moderate"
        }
        
        return AnalysisResponse(
            success=True,
            message="M3 ÂàÜÊûêÂÆåÊàê",
            data=result
        )
    except Exception as e:
        return AnalysisResponse(
            success=False,
            message=f"M3 ÂàÜÊûêÂ§±Êïó: {str(e)}"
        )

# M4 Ê®°ÁµÑÂàÜÊûê
@app.post("/analyze/M4")
def analyze_m4(request: UserInput):
    try:
        # Ê®°Êì¨ M4 ÂàÜÊûê
        result = {
            "module": "M4",
            "care_resources": ["ÈÜ´ÁôÇË≥áÊ∫ê", "ÁÖßË≠∑ÊäÄÂ∑ß"],
            "contact_info": ["ÈÜ´Èô¢ËÅØÁµ°", "Á§æÂ∑•ÂçîÂä©"],
            "practical_tips": ["ÂÆâÂÖ®Áí∞Â¢É", "Ê∫ùÈÄöÊäÄÂ∑ß"]
        }
        
        return AnalysisResponse(
            success=True,
            message="M4 ÂàÜÊûêÂÆåÊàê",
            data=result
        )
    except Exception as e:
        return AnalysisResponse(
            success=False,
            message=f"M4 ÂàÜÊûêÂ§±Êïó: {str(e)}"
        )

# Á∂úÂêàÂàÜÊûê
@app.post("/comprehensive-analysis")
def comprehensive_analysis(request: UserInput):
    try:
        print(f"üîç Êî∂Âà∞Á∂úÂêàÂàÜÊûêË´ãÊ±Ç: {request.message}")
        
        # ÂàÜÊûêÁî®Êà∂Ë®äÊÅØ
        analysis_result = analyze_user_message(request.message)
        print(f"üìä ÂàÜÊûêÁµêÊûú: {analysis_result}")
        
        # ÁîüÊàê Flex Message
        flex_message = generate_flex_reply(analysis_result)
        print(f"üé® ÁîüÊàê Flex Message: {flex_message.get('altText', 'N/A')}")
        
        # ËøîÂõûÂåÖÂê´ Flex Message ÁöÑÂõûÊáâ
        return {
            "success": True,
            "message": "Á∂úÂêàÂàÜÊûêÂÆåÊàê",
            "data": analysis_result.get("data", {}),
            "flex_message": flex_message
        }
    except Exception as e:
        print(f"‚ùå Á∂úÂêàÂàÜÊûêÂ§±Êïó: {e}")
        return {
            "success": False,
            "message": f"Á∂úÂêàÂàÜÊûêÂ§±Êïó: {str(e)}",
            "flex_message": create_simple_flex_message(
                "‚ùå ÂàÜÊûêÂ§±Êïó",
                "Êä±Ê≠âÔºåÂàÜÊûêÈÅéÁ®ã‰∏≠ÁôºÁîüÈåØË™§ÔºåË´ãÁ®çÂæåÂÜçË©¶„ÄÇ",
                "#F44336"
            )
        }

# Ê∑ªÂä† comprehensive Á´ØÈªûÔºàÂà•ÂêçÔºâ
@app.post("/analyze/comprehensive")
def analyze_comprehensive(request: UserInput):
    """comprehensive ÂàÜÊûêÁöÑÂà•ÂêçÁ´ØÈªû"""
    return comprehensive_analysis(request)

# LINE Bot Webhook
@app.post("/webhook")
async def webhook(request: Request):
    try:
        body = await request.body()
        signature = request.headers.get("X-Line-Signature", "")
        
        print(f"üì• Êî∂Âà∞ LINE Webhook Ë´ãÊ±Ç")
        print(f"üìù Á∞ΩÂêç: {signature[:20]}...")
        print(f"üìè Ë´ãÊ±ÇÈ´îÂ§ßÂ∞è: {len(body)} bytes")
        
        # Ê™¢Êü• LINE Bot ÊòØÂê¶Â∑≤ÂàùÂßãÂåñ
        if not line_bot_api or not handler:
            print("‚ùå LINE Bot Êú™ÂàùÂßãÂåñ")
            raise HTTPException(status_code=500, detail="LINE Bot not initialized")
        
        # È©óË≠âÁ∞ΩÂêç‰∏¶ËôïÁêÜ‰∫ã‰ª∂
        try:
            body_str = body.decode('utf-8')
            print(f"üìÑ Ë´ãÊ±ÇÈ´îÂÖßÂÆπ: {body_str[:200]}...")
            
            # ÂòóË©¶Ëß£Êûê JSON ‰ª•Ê™¢Êü•‰∫ã‰ª∂ÁµêÊßã
            try:
                event_data = json.loads(body_str)
                print(f"üìä ‰∫ã‰ª∂Êï∏Èáè: {len(event_data.get('events', []))}")
                for i, event in enumerate(event_data.get('events', [])):
                    print(f"   ‰∫ã‰ª∂ {i+1}: {event.get('type', 'unknown')}")
            except json.JSONDecodeError as e:
                print(f"‚ö†Ô∏è JSON Ëß£ÊûêÈåØË™§: {e}")
            
            # ‰ΩøÁî® LINE Bot SDK ËôïÁêÜ‰∫ã‰ª∂
            handler.handle(body_str, signature)
            print("‚úÖ Webhook ËôïÁêÜÊàêÂäü")
            
        except InvalidSignatureError as e:
            print(f"‚ùå Á∞ΩÂêçÈ©óË≠âÂ§±Êïó: {e}")
            print("Ë´ãÊ™¢Êü• LINE_CHANNEL_SECRET ÊòØÂê¶Ê≠£Á¢∫")
            raise HTTPException(status_code=400, detail="Invalid signature")
            
        except Exception as e:
            print(f"‚ùå Webhook ËôïÁêÜÂ§±Êïó: {e}")
            print(f"ÈåØË™§È°ûÂûã: {type(e)}")
            
            # ÂòóË©¶ÊâãÂãïËôïÁêÜ‰∫ã‰ª∂
            try:
                print("üîÑ ÂòóË©¶ÊâãÂãïËôïÁêÜ‰∫ã‰ª∂...")
                event_data = json.loads(body_str)
                events = event_data.get('events', [])
                
                for event in events:
                    if event.get('type') == 'message' and event.get('message', {}).get('type') == 'text':
                        # ÂâµÂª∫Ê®°Êì¨ÁöÑ MessageEvent
                        from linebot.v3.webhooks import UserSource, TextMessageContent
                        
                        # ÂâµÂª∫Áî®Êà∂‰æÜÊ∫ê
                        source = UserSource(user_id=event['source']['userId'])
                        
                        # ÂâµÂª∫ÊñáÂ≠óË®äÊÅØ
                        message = TextMessageContent(
                            id=event['message']['id'],
                            text=event['message']['text'],
                            quote_token=event['message'].get('quoteToken', '')
                        )
                        
                        # ÂâµÂª∫ MessageEvent
                        message_event = MessageEvent(
                            type='message',
                            mode=event.get('mode', 'active'),
                            timestamp=event.get('timestamp', 0),
                            source=source,
                            webhook_event_id=event.get('webhookEventId', ''),
                            delivery_context=event.get('deliveryContext', {}),
                            reply_token=event.get('replyToken', ''),
                            message=message
                        )
                        
                        # ËôïÁêÜ‰∫ã‰ª∂
                        handle_line_message(message_event)
                        print("‚úÖ ÊâãÂãïËôïÁêÜ‰∫ã‰ª∂ÊàêÂäü")
                        
            except Exception as manual_error:
                print(f"‚ùå ÊâãÂãïËôïÁêÜ‰πüÂ§±Êïó: {manual_error}")
                raise HTTPException(status_code=500, detail="Internal server error")
        
        return {"status": "success"}
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Webhook error: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

# Ê∏¨Ë©¶ Webhook Á´ØÈªûÔºàË∑≥ÈÅéÁ∞ΩÂêçÈ©óË≠âÔºâ
@app.post("/test-webhook")
async def test_webhook(request: Request):
    """Ê∏¨Ë©¶ Webhook Á´ØÈªûÔºåË∑≥ÈÅéÁ∞ΩÂêçÈ©óË≠â"""
    try:
        body = await request.body()
        body_str = body.decode('utf-8')
        
        print(f"üß™ Ê∏¨Ë©¶ Webhook Ë´ãÊ±Ç")
        print(f"üìè Ë´ãÊ±ÇÈ´îÂ§ßÂ∞è: {len(body)} bytes")
        print(f"üìÑ Ë´ãÊ±ÇÈ´îÂÖßÂÆπ: {body_str[:200]}...")
        
        # Ê™¢Êü• LINE Bot ÊòØÂê¶Â∑≤ÂàùÂßãÂåñ
        if not line_bot_api or not handler:
            print("‚ùå LINE Bot Êú™ÂàùÂßãÂåñ")
            return {"status": "error", "message": "LINE Bot not initialized"}
        
        # ÂòóË©¶Ëß£Êûê JSON
        try:
            event_data = json.loads(body_str)
            print(f"üìä ‰∫ã‰ª∂Êï∏Èáè: {len(event_data.get('events', []))}")
            
            events = event_data.get('events', [])
            processed_count = 0
            
            for event in events:
                if event.get('type') == 'message' and event.get('message', {}).get('type') == 'text':
                    print(f"üì® ËôïÁêÜÊñáÂ≠óË®äÊÅØ: {event['message']['text']}")
                    
                    # ÂâµÂª∫Ê®°Êì¨ÁöÑ MessageEvent
                    from linebot.v3.webhooks import UserSource, TextMessageContent
                    
                    # ÂâµÂª∫Áî®Êà∂‰æÜÊ∫ê
                    source = UserSource(user_id=event['source']['userId'])
                    
                    # ÂâµÂª∫ÊñáÂ≠óË®äÊÅØ
                    message = TextMessageContent(
                        id=event['message']['id'],
                        text=event['message']['text'],
                        quote_token=event['message'].get('quoteToken', '')
                    )
                    
                    # ÂâµÂª∫ MessageEvent
                    message_event = MessageEvent(
                        type='message',
                        mode=event.get('mode', 'active'),
                        timestamp=event.get('timestamp', 0),
                        source=source,
                        webhook_event_id=event.get('webhookEventId', ''),
                        delivery_context=event.get('deliveryContext', {}),
                        reply_token=event.get('replyToken', ''),
                        message=message
                    )
                    
                    # ËôïÁêÜ‰∫ã‰ª∂
                    handle_line_message(message_event)
                    processed_count += 1
                    print(f"‚úÖ ËôïÁêÜ‰∫ã‰ª∂ÊàêÂäü ({processed_count})")
                    
        except json.JSONDecodeError as e:
            print(f"‚ùå JSON Ëß£ÊûêÈåØË™§: {e}")
            return {"status": "error", "message": "Invalid JSON"}
        except Exception as e:
            print(f"‚ùå ‰∫ã‰ª∂ËôïÁêÜÈåØË™§: {e}")
            return {"status": "error", "message": str(e)}
        
        print(f"‚úÖ Ê∏¨Ë©¶ Webhook ËôïÁêÜÂÆåÊàêÔºåËôïÁêÜ‰∫Ü {processed_count} ÂÄã‰∫ã‰ª∂")
        return {"status": "success", "processed_events": processed_count}
        
    except Exception as e:
        print(f"‚ùå Ê∏¨Ë©¶ Webhook ÈåØË™§: {e}")
        return {"status": "error", "message": str(e)}

# ÂïüÂãï‰∫ã‰ª∂
@app.on_event("startup")
async def startup():
    print("üöÄ API ÂïüÂãï‰∏≠...")
    
    # Ê™¢Êü•Áí∞Â¢ÉËÆäÊï∏
    if not check_env_variables():
        print("‚ùå Áí∞Â¢ÉËÆäÊï∏Ê™¢Êü•Â§±Êïó")
        return
    
    if TEST_MODE:
        print("üß™ Ê∏¨Ë©¶Ê®°ÂºèÂ∑≤ÂïüÁî® - LINE Ë®äÊÅØÂ∞á‰∏çÊúÉÂØ¶ÈöõÁôºÈÄÅ")
    else:
        print("üì± ÁîüÁî¢Ê®°Âºè - LINE Ë®äÊÅØÂ∞áÊ≠£Â∏∏ÁôºÈÄÅ")
    
    print("‚úÖ API ÂïüÂãïÂÆåÊàê")

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8005) 