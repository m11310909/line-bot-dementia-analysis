"""
‰ΩøÁî®ËÄÖÂõûÈ•ãÊî∂ÈõÜÊï¥ÂêàÁ≥ªÁµ±
ÈöéÊÆµÂõõ‰ªªÂãô 7.3Ôºö‰ΩøÁî®ËÄÖÂõûÈ•ãÊî∂ÈõÜÊï¥Âêà
"""

from typing import Dict, List, Any, Optional
from enum import Enum
import json
import os
from datetime import datetime
import uuid

class FeedbackType(str, Enum):
    RATING = "rating"
    TEXT = "text"
    MULTIPLE_CHOICE = "multiple_choice"
    BOOLEAN = "boolean"

class FeedbackPoint(str, Enum):
    AFTER_AI_RESPONSE = "after_ai_response"
    AFTER_VISUAL_EXPLANATION = "after_visual_explanation"
    SESSION_END = "session_end"
    ERROR_ENCOUNTERED = "error_encountered"
    MODULE_SWITCH = "module_switch"

class FeedbackCollector:
    """Êï¥Âêà‰ΩøÁî®ËÄÖÂõûÈ•ãÂà∞Â∞çË©±ÊµÅÁ®ã"""
    
    FEEDBACK_POINTS = {
        FeedbackPoint.AFTER_AI_RESPONSE: {
            'message': 'ÈÄôÂÄãË≥áË®äÂ∞çÊÇ®ÊúâÂπ´Âä©ÂóéÔºü',
            'type': FeedbackType.MULTIPLE_CHOICE,
            'options': ['ÂæàÊúâÂπ´Âä©', 'ÈÇÑÂèØ‰ª•', 'Áúã‰∏çÊáÇ'],
            'follow_up': {
                'ÂæàÊúâÂπ´Âä©': None,
                'ÈÇÑÂèØ‰ª•': 'Âì™ÂÄãÈÉ®ÂàÜÈúÄË¶ÅÊõ¥Ê∏ÖÊ•öË™™ÊòéÔºü',
                'Áúã‰∏çÊáÇ': 'ÊàëÊèõÂÄãÊñπÂºèË™™Êòé'
            },
            'collect_details': False,
            'trigger_condition': 'confidence > 0.7'
        },
        FeedbackPoint.AFTER_VISUAL_EXPLANATION: {
            'message': 'ÂúñË°®Ë™™ÊòéÊ∏ÖÊ•öÂóéÔºü',
            'type': FeedbackType.MULTIPLE_CHOICE,
            'options': ['Ê∏ÖÊ•ö', 'Â§™Ë§áÈõú', 'ÈúÄË¶ÅÊñáÂ≠óË™™Êòé'],
            'follow_up': {
                'Ê∏ÖÊ•ö': None,
                'Â§™Ë§áÈõú': 'ÊÇ®Â∏åÊúõÁ∞°ÂåñÂì™ÂÄãÈÉ®ÂàÜÔºü',
                'ÈúÄË¶ÅÊñáÂ≠óË™™Êòé': 'ÊàëÊèê‰æõÊñáÂ≠óÁâàÊú¨'
            },
            'collect_details': True,
            'trigger_condition': 'visual_explanation_shown'
        },
        FeedbackPoint.SESSION_END: {
            'message': 'Êï¥È´î‰ΩøÁî®È´îÈ©óË©ïÂàÜ',
            'type': FeedbackType.RATING,
            'scale': 5,
            'optional_comment': True,
            'follow_up': {
                '1-2': 'Ë´ãÂëäË®¥ÊàëÂÄëÂ¶Ç‰ΩïÊîπÂñÑ',
                '3': 'Êúâ‰ªÄÈ∫ºÂª∫Ë≠∞ÂóéÔºü',
                '4-5': 'Ë¨ùË¨ùÊÇ®ÁöÑÂõûÈ•ãÔºÅ'
            },
            'trigger_condition': 'session_duration > 5_minutes'
        },
        FeedbackPoint.ERROR_ENCOUNTERED: {
            'message': 'ÈÅáÂà∞ÂïèÈ°å‰∫ÜÂóéÔºü',
            'type': FeedbackType.BOOLEAN,
            'options': ['ÊòØ', 'Âê¶'],
            'follow_up': {
                'ÊòØ': 'Ë´ãÊèèËø∞ÈÅáÂà∞ÁöÑÂïèÈ°å',
                'Âê¶': 'Ë¨ùË¨ùÊÇ®ÁöÑÁ¢∫Ë™ç'
            },
            'collect_details': True,
            'trigger_condition': 'error_occurred'
        },
        FeedbackPoint.MODULE_SWITCH: {
            'message': 'Ê®°ÁµÑÂàáÊèõÈ†ÜÂà©ÂóéÔºü',
            'type': FeedbackType.MULTIPLE_CHOICE,
            'options': ['È†ÜÂà©', 'ÊúâÈªûÂõ∞Èõ£', 'Êâæ‰∏çÂà∞'],
            'follow_up': {
                'È†ÜÂà©': None,
                'ÊúâÈªûÂõ∞Èõ£': 'Âì™ÂÄãÈÉ®ÂàÜÈúÄË¶ÅÊîπÂñÑÔºü',
                'Êâæ‰∏çÂà∞': 'ÊàëÊèê‰æõÊõ¥Ê∏ÖÊ•öÁöÑÊåáÂºï'
            },
            'collect_details': False,
            'trigger_condition': 'module_switched'
        }
    }
    
    def __init__(self, storage_path: str = "feedback_data"):
        self.storage_path = storage_path
        self.feedback_history = []
        self.session_data = {}
        
        # Á¢∫‰øùÂÑ≤Â≠òÁõÆÈåÑÂ≠òÂú®
        os.makedirs(storage_path, exist_ok=True)
    
    def should_collect_feedback(self, feedback_point: str, context: dict = None) -> bool:
        """Âà§Êñ∑ÊòØÂê¶ÊáâË©≤Êî∂ÈõÜÂõûÈ•ã"""
        
        if feedback_point not in self.FEEDBACK_POINTS:
            return False
        
        feedback_config = self.FEEDBACK_POINTS[feedback_point]
        trigger_condition = feedback_config.get('trigger_condition', 'always')
        
        # Á∞°ÂñÆÁöÑÊ¢ù‰ª∂Âà§Êñ∑
        if trigger_condition == 'always':
            return True
        elif trigger_condition == 'confidence > 0.7':
            confidence = context.get('confidence', 0.0) if context else 0.0
            return confidence > 0.7
        elif trigger_condition == 'visual_explanation_shown':
            return context.get('visual_shown', False) if context else False
        elif trigger_condition == 'session_duration > 5_minutes':
            session_duration = context.get('session_duration', 0) if context else 0
            return session_duration > 300  # 5 ÂàÜÈêò = 300 Áßí
        elif trigger_condition == 'error_occurred':
            return context.get('error_occurred', False) if context else False
        elif trigger_condition == 'module_switched':
            return context.get('module_switched', False) if context else False
        
        return True
    
    def insert_feedback_request(self, feedback_point: str, context: dict = None) -> Dict[str, Any]:
        """Âú®Â∞çË©±ÈÅ©Áï∂ÊôÇÊ©üÊèíÂÖ•ÂõûÈ•ãË´ãÊ±Ç"""
        
        if not self.should_collect_feedback(feedback_point, context):
            return None
        
        feedback_config = self.FEEDBACK_POINTS[feedback_point]
        
        # ÁîüÊàêÂõûÈ•ãË´ãÊ±Ç
        feedback_request = {
            "id": str(uuid.uuid4()),
            "type": feedback_point,
            "message": feedback_config['message'],
            "feedback_type": feedback_config['type'],
            "options": feedback_config.get('options', []),
            "scale": feedback_config.get('scale', 5),
            "optional_comment": feedback_config.get('optional_comment', False),
            "follow_up": feedback_config.get('follow_up', {}),
            "collect_details": feedback_config.get('collect_details', False),
            "timestamp": datetime.now().isoformat(),
            "context": context or {}
        }
        
        # ÁîüÊàê Flex Message
        flex_message = self._create_feedback_flex_message(feedback_request)
        feedback_request["flex_message"] = flex_message
        
        return feedback_request
    
    def _create_feedback_flex_message(self, feedback_request: dict) -> Dict[str, Any]:
        """ÂâµÂª∫ÂõûÈ•ãÊî∂ÈõÜÁöÑ Flex Message"""
        
        feedback_type = feedback_request["feedback_type"]
        message = feedback_request["message"]
        
        if feedback_type == FeedbackType.RATING:
            return self._create_rating_flex_message(message, feedback_request["scale"])
        elif feedback_type == FeedbackType.MULTIPLE_CHOICE:
            return self._create_multiple_choice_flex_message(message, feedback_request["options"])
        elif feedback_type == FeedbackType.BOOLEAN:
            return self._create_boolean_flex_message(message, feedback_request["options"])
        else:
            return self._create_text_feedback_flex_message(message)
    
    def _create_rating_flex_message(self, message: str, scale: int) -> Dict[str, Any]:
        """ÂâµÂª∫Ë©ïÂàÜÂõûÈ•ã Flex Message"""
        
        rating_buttons = []
        for i in range(1, scale + 1):
            rating_buttons.append({
                "type": "action",
                "action": {
                    "type": "message",
                    "label": str(i),
                    "text": f"Ë©ïÂàÜÔºö{i}ÂàÜ"
                }
            })
        
        return {
            "type": "flex",
            "altText": message,
            "contents": {
                "type": "bubble",
                "size": "kilo",
                "header": {
                    "type": "box",
                    "layout": "horizontal",
                    "contents": [
                        {
                            "type": "text",
                            "text": "üìù ÂõûÈ•ãÊî∂ÈõÜ",
                            "weight": "bold",
                            "color": "#4A90E2",
                            "size": "sm"
                        }
                    ]
                },
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                        {
                            "type": "text",
                            "text": message,
                            "wrap": True,
                            "size": "sm",
                            "color": "#666666"
                        }
                    ]
                },
                "footer": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "contents": rating_buttons
                        }
                    ]
                }
            }
        }
    
    def _create_multiple_choice_flex_message(self, message: str, options: List[str]) -> Dict[str, Any]:
        """ÂâµÂª∫Â§öÈÅ∏ÂõûÈ•ã Flex Message"""
        
        choice_buttons = []
        for option in options:
            choice_buttons.append({
                "type": "action",
                "action": {
                    "type": "message",
                    "label": option,
                    "text": f"ÂõûÈ•ãÔºö{option}"
                }
            })
        
        return {
            "type": "flex",
            "altText": message,
            "contents": {
                "type": "bubble",
                "size": "kilo",
                "header": {
                    "type": "box",
                    "layout": "horizontal",
                    "contents": [
                        {
                            "type": "text",
                            "text": "üìù ÂõûÈ•ãÊî∂ÈõÜ",
                            "weight": "bold",
                            "color": "#4A90E2",
                            "size": "sm"
                        }
                    ]
                },
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                        {
                            "type": "text",
                            "text": message,
                            "wrap": True,
                            "size": "sm",
                            "color": "#666666"
                        }
                    ]
                },
                "footer": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "contents": choice_buttons[:3]  # ÊúÄÂ§öÈ°ØÁ§∫ 3 ÂÄãÈÅ∏È†Ö
                        }
                    ]
                }
            }
        }
    
    def _create_boolean_flex_message(self, message: str, options: List[str]) -> Dict[str, Any]:
        """ÂâµÂª∫Â∏ÉÊûóÂõûÈ•ã Flex Message"""
        
        return {
            "type": "flex",
            "altText": message,
            "contents": {
                "type": "bubble",
                "size": "kilo",
                "header": {
                    "type": "box",
                    "layout": "horizontal",
                    "contents": [
                        {
                            "type": "text",
                            "text": "üìù ÂõûÈ•ãÊî∂ÈõÜ",
                            "weight": "bold",
                            "color": "#4A90E2",
                            "size": "sm"
                        }
                    ]
                },
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                        {
                            "type": "text",
                            "text": message,
                            "wrap": True,
                            "size": "sm",
                            "color": "#666666"
                        }
                    ]
                },
                "footer": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "contents": [
                                {
                                    "type": "action",
                                    "action": {
                                        "type": "message",
                                        "label": options[0],
                                        "text": f"ÂõûÈ•ãÔºö{options[0]}"
                                    }
                                },
                                {
                                    "type": "action",
                                    "action": {
                                        "type": "message",
                                        "label": options[1],
                                        "text": f"ÂõûÈ•ãÔºö{options[1]}"
                                    }
                                }
                            ]
                        }
                    ]
                }
            }
        }
    
    def _create_text_feedback_flex_message(self, message: str) -> Dict[str, Any]:
        """ÂâµÂª∫ÊñáÂ≠óÂõûÈ•ã Flex Message"""
        
        return {
            "type": "flex",
            "altText": message,
            "contents": {
                "type": "bubble",
                "size": "kilo",
                "header": {
                    "type": "box",
                    "layout": "horizontal",
                    "contents": [
                        {
                            "type": "text",
                            "text": "üìù ÂõûÈ•ãÊî∂ÈõÜ",
                            "weight": "bold",
                            "color": "#4A90E2",
                            "size": "sm"
                        }
                    ]
                },
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                        {
                            "type": "text",
                            "text": message,
                            "wrap": True,
                            "size": "sm",
                            "color": "#666666"
                        }
                    ]
                }
            }
        }
    
    def process_feedback_response(self, feedback_id: str, response: str, user_id: str = None) -> Dict[str, Any]:
        """ËôïÁêÜ‰ΩøÁî®ËÄÖÂõûÈ•ãÂõûÊáâ"""
        
        # Ë®òÈåÑÂõûÈ•ã
        feedback_record = {
            "feedback_id": feedback_id,
            "user_id": user_id,
            "response": response,
            "timestamp": datetime.now().isoformat()
        }
        
        self.feedback_history.append(feedback_record)
        
        # ÂÑ≤Â≠òÂà∞Ê™îÊ°à
        self._save_feedback(feedback_record)
        
        # ÂàÜÊûêÂõûÈ•ã‰∏¶ÁîüÊàêÂæåÁ∫åË°åÂãï
        follow_up_action = self._analyze_feedback_response(feedback_id, response)
        
        return {
            "feedback_processed": True,
            "follow_up_action": follow_up_action,
            "feedback_record": feedback_record
        }
    
    def _analyze_feedback_response(self, feedback_id: str, response: str) -> Dict[str, Any]:
        """ÂàÜÊûêÂõûÈ•ãÂõûÊáâ‰∏¶ÁîüÊàêÂæåÁ∫åË°åÂãï"""
        
        # ÈÄôË£°ÂèØ‰ª•ÂØ¶‰ΩúÊõ¥Ë§áÈõúÁöÑÂõûÈ•ãÂàÜÊûêÈÇèËºØ
        if "ÂæàÊúâÂπ´Âä©" in response or "Ê∏ÖÊ•ö" in response:
            return {
                "action": "positive_feedback",
                "message": "Ë¨ùË¨ùÊÇ®ÁöÑÂõûÈ•ãÔºÅ",
                "next_step": "continue_conversation"
            }
        elif "ÈÇÑÂèØ‰ª•" in response or "ÊúâÈªûÂõ∞Èõ£" in response:
            return {
                "action": "neutral_feedback",
                "message": "ÊàëÂÄëÊúÉÊåÅÁ∫åÊîπÂñÑÔºåË¨ùË¨ùÊÇ®ÁöÑÂª∫Ë≠∞ÔºÅ",
                "next_step": "offer_improvement"
            }
        elif "Áúã‰∏çÊáÇ" in response or "Â§™Ë§áÈõú" in response:
            return {
                "action": "negative_feedback",
                "message": "ÊàëÊèõÂÄãÊñπÂºèË™™Êòé",
                "next_step": "simplify_explanation"
            }
        else:
            return {
                "action": "general_feedback",
                "message": "Ë¨ùË¨ùÊÇ®ÁöÑÂõûÈ•ãÔºÅ",
                "next_step": "continue_conversation"
            }
    
    def _save_feedback(self, feedback_record: dict):
        """ÂÑ≤Â≠òÂõûÈ•ãÂà∞Ê™îÊ°à"""
        
        filename = f"{self.storage_path}/feedback_{datetime.now().strftime('%Y%m%d')}.jsonl"
        
        try:
            with open(filename, 'a', encoding='utf-8') as f:
                f.write(json.dumps(feedback_record, ensure_ascii=False) + '\n')
        except Exception as e:
            print(f"ÂÑ≤Â≠òÂõûÈ•ãÂ§±Êïó: {e}")
    
    def get_feedback_stats(self, start_date: str = None, end_date: str = None) -> Dict[str, Any]:
        """Áç≤ÂèñÂõûÈ•ãÁµ±Ë®à"""
        
        # ËÆÄÂèñÂõûÈ•ãÊ™îÊ°à
        feedback_data = []
        for filename in os.listdir(self.storage_path):
            if filename.startswith("feedback_") and filename.endswith(".jsonl"):
                filepath = os.path.join(self.storage_path, filename)
                try:
                    with open(filepath, 'r', encoding='utf-8') as f:
                        for line in f:
                            if line.strip():
                                feedback_data.append(json.loads(line.strip()))
                except Exception as e:
                    print(f"ËÆÄÂèñÂõûÈ•ãÊ™îÊ°àÂ§±Êïó {filename}: {e}")
        
        # Ë®àÁÆóÁµ±Ë®à
        total_feedback = len(feedback_data)
        positive_feedback = len([f for f in feedback_data if "ÂæàÊúâÂπ´Âä©" in f.get("response", "")])
        negative_feedback = len([f for f in feedback_data if "Áúã‰∏çÊáÇ" in f.get("response", "")])
        
        return {
            "total_feedback": total_feedback,
            "positive_feedback": positive_feedback,
            "negative_feedback": negative_feedback,
            "neutral_feedback": total_feedback - positive_feedback - negative_feedback,
            "satisfaction_rate": positive_feedback / total_feedback if total_feedback > 0 else 0.0
        }

# ‰ΩøÁî®ÁØÑ‰æã
def example_usage():
    """ÂõûÈ•ãÊî∂ÈõÜÁ≥ªÁµ±‰ΩøÁî®ÁØÑ‰æã"""
    
    # ÂâµÂª∫ÂõûÈ•ãÊî∂ÈõÜÂô®
    collector = FeedbackCollector()
    
    # Ê®°Êì¨‰∏ä‰∏ãÊñá
    context = {
        "confidence": 0.8,
        "visual_shown": True,
        "session_duration": 600,  # 10 ÂàÜÈêò
        "module_switched": True
    }
    
    # Ê∏¨Ë©¶ÂõûÈ•ãË´ãÊ±Ç
    feedback_request = collector.insert_feedback_request(
        FeedbackPoint.AFTER_AI_RESPONSE,
        context
    )
    
    if feedback_request:
        print("ÂõûÈ•ãË´ãÊ±Ç:", feedback_request)
        
        # Ê®°Êì¨ËôïÁêÜÂõûÈ•ãÂõûÊáâ
        result = collector.process_feedback_response(
            feedback_request["id"],
            "ÂæàÊúâÂπ´Âä©",
            "user123"
        )
        
        print("ÂõûÈ•ãËôïÁêÜÁµêÊûú:", result)
    
    # Áç≤ÂèñÁµ±Ë®à
    stats = collector.get_feedback_stats()
    print("ÂõûÈ•ãÁµ±Ë®à:", stats)
    
    return feedback_request

if __name__ == "__main__":
    example_usage() 