"""
M4 Ê®°ÁµÑÔºöÁÖßË≠∑Â∞éËà™Á≥ªÁµ±
Êèê‰æõË¶ñË¶∫ÂåñÁöÑÁÖßË≠∑Ë≥áÊ∫êÂ∞éËà™ÔºåÂåÖÂê´ÈÜ´ÁôÇË≥áÊ∫ê„ÄÅÁ§æÊúÉÊîØÊåÅ„ÄÅÁÖßË≠∑ÊäÄÂ∑ßÁ≠â
"""

from typing import Dict, List, Any
from dataclasses import dataclass
from enum import Enum

class CareCategory(Enum):
    MEDICAL = "ÈÜ´ÁôÇË≥áÊ∫ê"
    SOCIAL = "Á§æÊúÉÊîØÊåÅ"
    SKILLS = "ÁÖßË≠∑ÊäÄÂ∑ß"
    EMERGENCY = "Á∑äÊÄ•ËôïÁêÜ"
    LEGAL = "Ê≥ïÂæãÊ¨äÁõä"

@dataclass
class CareResource:
    category: CareCategory
    title: str
    description: str
    resources: List[str]
    contact_info: List[str]
    tips: List[str]
    color: str
    icon: str

class M4CareNavigationModule:
    def __init__(self):
        self.care_resources = self._load_care_resources()
    
    def _load_care_resources(self) -> Dict[CareCategory, CareResource]:
        """ËºâÂÖ•ÁÖßË≠∑Ë≥áÊ∫êË≥áÊñô"""
        return {
            CareCategory.MEDICAL: CareResource(
                category=CareCategory.MEDICAL,
                title="ÈÜ´ÁôÇË≥áÊ∫êÂ∞éËà™",
                description="Â∞àÊ•≠ÈÜ´ÁôÇË©ï‰º∞ÂíåÊ≤ªÁôÇË≥áÊ∫ê",
                resources=[
                    "Á•ûÁ∂ìÁßëÈÜ´Â∏´Ë©ï‰º∞",
                    "Á≤æÁ•ûÁßëÈÜ´Â∏´Ë´ÆË©¢",
                    "Ë™çÁü•ÂäüËÉΩË©ï‰º∞",
                    "Ëó•Áâ©Ê≤ªÁôÇËøΩËπ§",
                    "Âæ©ÂÅ•Ê≤ªÁôÇÊúçÂãô"
                ],
                contact_info=[
                    "ÂêÑÂ§ßÈÜ´Èô¢Á•ûÁ∂ìÁßëÈñÄË®∫",
                    "Â§±Êô∫ÁóáÂ∞àÁßëË®∫ÊâÄ",
                    "Ë™çÁü•ÈöúÁ§ôË©ï‰º∞‰∏≠ÂøÉ",
                    "Á§æÂçÄÂøÉÁêÜË°õÁîü‰∏≠ÂøÉ"
                ],
                tips=[
                    "Âª∫Ë≠∞ÂÖàËá≥Á•ûÁ∂ìÁßëÈÄ≤Ë°åÂÆåÊï¥Ë©ï‰º∞",
                    "ÂÆöÊúüËøΩËπ§Ë™çÁü•ÂäüËÉΩËÆäÂåñ",
                    "Ë®òÈåÑÁóáÁãÄËÆäÂåñ‰æõÈÜ´Â∏´ÂèÉËÄÉ",
                    "Ë©¢ÂïèËó•Áâ©ÂâØ‰ΩúÁî®ÂíåÊ≥®ÊÑè‰∫ãÈ†Ö"
                ],
                color="#007bff",
                icon="üè•"
            ),
            CareCategory.SOCIAL: CareResource(
                category=CareCategory.SOCIAL,
                title="Á§æÊúÉÊîØÊåÅË≥áÊ∫ê",
                description="Á§æÊúÉÁ¶èÂà©ÂíåÁÖßË≠∑ÊîØÊåÅÊúçÂãô",
                resources=[
                    "Â§±Êô∫ÁóáÁÖßË≠∑ËÄÖÊîØÊåÅÂúòÈ´î",
                    "Êó•ÈñìÁÖßË≠∑‰∏≠ÂøÉ",
                    "Â±ÖÂÆ∂ÁÖßË≠∑ÊúçÂãô",
                    "ÂñòÊÅØÊúçÂãô",
                    "Á∂ìÊøüË£úÂä©Áî≥Ë´ã"
                ],
                contact_info=[
                    "ÂêÑÁ∏£Â∏ÇÁ§æÊúÉÂ±Ä",
                    "Â§±Êô∫ÁóáÂçîÊúÉ",
                    "Èï∑ÁÖßÁÆ°ÁêÜ‰∏≠ÂøÉ",
                    "ÂÆ∂Â∫≠ÁÖßÈ°ßËÄÖÈóúÊá∑Á∏ΩÊúÉ"
                ],
                tips=[
                    "‰∏ªÂãïÂ∞ãÊ±ÇÁ§æÊúÉË≥áÊ∫êÂçîÂä©",
                    "ÂèÉÂä†ÁÖßË≠∑ËÄÖÊîØÊåÅÂúòÈ´î",
                    "Áî≥Ë´ãÁõ∏ÈóúË£úÂä©Ê∏õËºïË≤†Êìî",
                    "Âª∫Á´ãÁÖßË≠∑ËÄÖ‰∫íÂä©Á∂≤Áµ°"
                ],
                color="#28a745",
                icon="ü§ù"
            ),
            CareCategory.SKILLS: CareResource(
                category=CareCategory.SKILLS,
                title="ÁÖßË≠∑ÊäÄÂ∑ßÊåáÂ∞é",
                description="ÂØ¶Áî®ÁöÑÁÖßË≠∑ÊäÄÂ∑ßÂíåÁü•Ë≠ò",
                resources=[
                    "Ê∫ùÈÄöÊäÄÂ∑ßË®ìÁ∑¥",
                    "Ë°åÁÇ∫ÂïèÈ°åËôïÁêÜ",
                    "Áí∞Â¢ÉÂÆâÂÖ®Ë®≠Ë®à",
                    "ÁáüÈ§äÁÖßË≠∑ÊåáÂ∞é",
                    "Ê¥ªÂãïË®≠Ë®àÊäÄÂ∑ß"
                ],
                contact_info=[
                    "Â§±Êô∫ÁóáÁÖßË≠∑ÊïôËÇ≤Ë™≤Á®ã",
                    "Ë≠∑ÁêÜÂ∏´Â±ÖÂÆ∂ÊåáÂ∞é",
                    "ËÅ∑ËÉΩÊ≤ªÁôÇÂ∏´Ë´ÆË©¢",
                    "ÁáüÈ§äÂ∏´Ë©ï‰º∞ÊúçÂãô"
                ],
                tips=[
                    "Â≠∏ÁøíÊúâÊïàÁöÑÊ∫ùÈÄöÊñπÂºè",
                    "Âª∫Á´ãÂÆâÂÖ®ÁöÑÂ±ÖÂÆ∂Áí∞Â¢É",
                    "Ë®≠Ë®àÈÅ©ÂêàÁöÑÊ¥ªÂãï",
                    "Ê≥®ÊÑèÁáüÈ§äÂùáË°°"
                ],
                color="#ffc107",
                icon="üìö"
            ),
            CareCategory.EMERGENCY: CareResource(
                category=CareCategory.EMERGENCY,
                title="Á∑äÊÄ•ËôïÁêÜÊåáÂçó",
                description="Á∑äÊÄ•ÊÉÖÊ≥ÅÁöÑËôïÁêÜÊñπÊ≥ïÂíåË≥áÊ∫ê",
                resources=[
                    "Ëµ∞Â§±ËôïÁêÜÊµÅÁ®ã",
                    "ÊÄ•ÊÄßÁóáÁãÄËôïÁêÜ",
                    "ÊÑèÂ§ñ‰∫ã‰ª∂ÊáâÂ∞ç",
                    "Á∑äÊÄ•ËÅØÁµ°Ë≥áË®ä",
                    "ÊïëË≠∑ËªäÂè´Ëªä"
                ],
                contact_info=[
                    "Ë≠¶ÂØüÂ±ÄÂ§±Ëπ§‰∫∫Âè£ÂçîÂ∞ã",
                    "119Á∑äÊÄ•ÊïëË≠∑",
                    "ÈÜ´Èô¢ÊÄ•Ë®∫ÂÆ§",
                    "24Â∞èÊôÇÁÖßË≠∑Â∞àÁ∑ö"
                ],
                tips=[
                    "Ê∫ñÂÇôÁ∑äÊÄ•ËÅØÁµ°Âç°",
                    "ÂÆâË£ùGPSÂÆö‰ΩçË£ùÁΩÆ",
                    "Ë®òÈåÑÈáçË¶ÅÈÜ´ÁôÇË≥áË®ä",
                    "Âª∫Á´ãÁ∑äÊÄ•ÊáâËÆäË®àÁï´"
                ],
                color="#dc3545",
                icon="üö®"
            ),
            CareCategory.LEGAL: CareResource(
                category=CareCategory.LEGAL,
                title="Ê≥ïÂæãÊ¨äÁõä‰øùÈöú",
                description="Ê≥ïÂæãÊ¨äÁõäÂíåË≤°Áî¢‰øùË≠∑",
                resources=[
                    "Áõ£Ë≠∑ÂÆ£ÂëäÁî≥Ë´ã",
                    "Ë≤°Áî¢‰ø°Ë®óË¶èÂäÉ",
                    "ÈÅ∫Áî¢Ë¶èÂäÉË´ÆË©¢",
                    "‰øùÈö™ÁêÜË≥†ÂçîÂä©",
                    "Ê≥ïÂæãË´ÆË©¢ÊúçÂãô"
                ],
                contact_info=[
                    "Ê≥ïÈô¢ÂÆ∂‰∫ãÊ≥ïÂ∫≠",
                    "Ê≥ïÂæãÊâ∂Âä©Âü∫ÈáëÊúÉ",
                    "ÂæãÂ∏´ÂÖ¨ÊúÉ",
                    "Á§æÊúÉÂ±ÄÊ≥ïÂæãË´ÆË©¢"
                ],
                tips=[
                    "ÂèäÊó©Ë¶èÂäÉË≤°Áî¢ÁÆ°ÁêÜ",
                    "‰∫ÜËß£Áõ£Ë≠∑ÂÆ£ÂëäÁ®ãÂ∫è",
                    "Ê∫ñÂÇôÁõ∏ÈóúÊ≥ïÂæãÊñá‰ª∂",
                    "Â∞ãÊ±ÇÂ∞àÊ•≠Ê≥ïÂæãË´ÆË©¢"
                ],
                color="#6f42c1",
                icon="‚öñÔ∏è"
            )
        }
    
    def analyze_care_needs(self, user_input: str) -> Dict:
        """ÂàÜÊûêÁî®Êà∂ÁöÑÁÖßË≠∑ÈúÄÊ±Ç"""
        user_input_lower = user_input.lower()
        
        # ÈóúÈçµÂ≠óÂ∞çÊáâ‰∏çÂêåÁÖßË≠∑ÈúÄÊ±Ç
        care_keywords = {
            CareCategory.MEDICAL: ["ÈÜ´Áîü", "ÈÜ´Èô¢", "Ê≤ªÁôÇ", "Ëó•Áâ©", "Ë©ï‰º∞", "Ë®∫Êñ∑"],
            CareCategory.SOCIAL: ["Ë£úÂä©", "Ë≥áÊ∫ê", "ÊîØÊåÅ", "ÂúòÈ´î", "ÊúçÂãô", "Âπ´Âä©"],
            CareCategory.SKILLS: ["ÊäÄÂ∑ß", "ÊñπÊ≥ï", "ÊÄéÈ∫ºÂÅö", "ÁÖßÈ°ß", "Ê∫ùÈÄö", "Ê¥ªÂãï"],
            CareCategory.EMERGENCY: ["Á∑äÊÄ•", "Ëµ∞Â§±", "ÊÑèÂ§ñ", "Âç±Èö™", "ÊïëË≠∑", "Ë≠¶ÂØü"],
            CareCategory.LEGAL: ["Ê≥ïÂæã", "Ë≤°Áî¢", "Áõ£Ë≠∑", "Ê¨äÁõä", "‰øùÈö™", "ÈÅ∫Áî¢"]
        }
        
        # ÂàÜÊûêÈúÄÊ±Ç
        detected_needs = []
        for category, keywords in care_keywords.items():
            for keyword in keywords:
                if keyword in user_input_lower:
                    detected_needs.append(category)
                    break
        
        return {
            "detected_needs": list(set(detected_needs)),
            "primary_need": detected_needs[0] if detected_needs else None,
            "analysis": f"Ë≠òÂà•Âá∫ {len(detected_needs)} Á®ÆÁÖßË≠∑ÈúÄÊ±Ç"
        }
    
    def create_care_navigation_card(self, user_input: str, care_analysis: Dict) -> Dict:
        """ÂâµÂª∫ÁÖßË≠∑Â∞éËà™Âç°Áâá"""
        if not care_analysis["detected_needs"]:
            return self._create_general_care_card(user_input)
        
        primary_need = care_analysis["primary_need"]
        care_resource = self.care_resources[primary_need]
        
        return {
            "type": "flex",
            "altText": f"ÁÖßË≠∑Â∞éËà™Ôºö{care_resource.title}",
            "contents": {
                "type": "bubble",
                "size": "kilo",
                "header": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                        {
                            "type": "text",
                            "text": f"{care_resource.icon} {care_resource.title}",
                            "weight": "bold",
                            "size": "lg",
                            "color": "#ffffff"
                        }
                    ],
                    "backgroundColor": care_resource.color,
                    "paddingAll": "15dp"
                },
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                        {
                            "type": "text",
                            "text": care_resource.description,
                            "weight": "bold",
                            "size": "md",
                            "color": care_resource.color,
                            "wrap": True,
                            "margin": "md"
                        },
                        {
                            "type": "separator",
                            "margin": "md"
                        },
                        {
                            "type": "text",
                            "text": "üìã ÂèØÁî®Ë≥áÊ∫ê",
                            "weight": "bold",
                            "size": "sm",
                            "color": "#666666",
                            "margin": "md"
                        },
                        *self._create_resource_list(care_resource.resources),
                        {
                            "type": "separator",
                            "margin": "md"
                        },
                        {
                            "type": "text",
                            "text": "üí° ÂØ¶Áî®Âª∫Ë≠∞",
                            "weight": "bold",
                            "size": "sm",
                            "color": "#666666",
                            "margin": "md"
                        },
                        *self._create_tips_list(care_resource.tips),
                        {
                            "type": "separator",
                            "margin": "md"
                        },
                        {
                            "type": "text",
                            "text": f"üìù Áî®Êà∂ÈúÄÊ±ÇÔºö{user_input}",
                            "size": "sm",
                            "color": "#666666",
                            "wrap": True,
                            "margin": "md"
                        }
                    ]
                },
                "footer": {
                    "type": "box",
                    "layout": "horizontal",
                    "contents": [
                        {
                            "type": "button",
                            "style": "primary",
                            "height": "sm",
                            "action": {
                                "type": "message",
                                "label": "Êõ¥Â§öË≥áÊ∫ê",
                                "text": "Ë´ãÊèê‰æõÊõ¥Â§öÁÖßË≠∑ÈúÄÊ±Ç"
                            },
                            "flex": 1
                        }
                    ]
                }
            }
        }
    
    def _create_general_care_card(self, user_input: str) -> Dict:
        """ÂâµÂª∫‰∏ÄËà¨ÊÄßÁÖßË≠∑Â∞éËà™Âç°Áâá"""
        return {
            "type": "flex",
            "altText": "ÁÖßË≠∑Â∞éËà™Á≥ªÁµ±",
            "contents": {
                "type": "bubble",
                "size": "kilo",
                "header": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                        {
                            "type": "text",
                            "text": "üß≠ ÁÖßË≠∑Â∞éËà™Á≥ªÁµ±",
                            "weight": "bold",
                            "size": "lg",
                            "color": "#ffffff"
                        }
                    ],
                    "backgroundColor": "#005073",
                    "paddingAll": "15dp"
                },
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                        {
                            "type": "text",
                            "text": "üîç Ê†πÊìöÊÇ®ÁöÑÈúÄÊ±ÇÊèê‰æõÁÖßË≠∑Ë≥áÊ∫êÂ∞éËà™ÔºåÂåÖÂê´ÈÜ´ÁôÇ„ÄÅÁ§æÊúÉÊîØÊåÅ„ÄÅÁÖßË≠∑ÊäÄÂ∑ßÁ≠âÂÖ®Êñπ‰ΩçÂçîÂä©„ÄÇ",
                            "weight": "bold",
                            "size": "md",
                            "color": "#005073",
                            "wrap": True
                        },
                        {
                            "type": "separator",
                            "margin": "md"
                        },
                        {
                            "type": "text",
                            "text": f"üìù Áî®Êà∂ÈúÄÊ±ÇÔºö{user_input}",
                            "size": "sm",
                            "color": "#666666",
                            "wrap": True,
                            "margin": "md"
                        }
                    ]
                },
                "footer": {
                    "type": "box",
                    "layout": "horizontal",
                    "contents": [
                        {
                            "type": "button",
                            "style": "primary",
                            "height": "sm",
                            "action": {
                                "type": "message",
                                "label": "Ë©≥Á¥∞ÈúÄÊ±Ç",
                                "text": "Ë´ãÊèèËø∞ÂÖ∑È´îÁöÑÁÖßË≠∑ÈúÄÊ±Ç"
                            },
                            "flex": 1
                        }
                    ]
                }
            }
        }
    
    def _create_resource_list(self, resources: List[str]) -> List[Dict]:
        """ÂâµÂª∫Ë≥áÊ∫êÂàóË°®"""
        contents = []
        for resource in resources[:3]:  # Âè™È°ØÁ§∫Ââç3ÂÄã
            contents.append({
                "type": "text",
                "text": f"‚Ä¢ {resource}",
                "size": "sm",
                "wrap": True,
                "margin": "xs"
            })
        return contents
    
    def _create_tips_list(self, tips: List[str]) -> List[Dict]:
        """ÂâµÂª∫Âª∫Ë≠∞ÂàóË°®"""
        contents = []
        for tip in tips[:3]:  # Âè™È°ØÁ§∫Ââç3ÂÄã
            contents.append({
                "type": "text",
                "text": f"‚Ä¢ {tip}",
                "size": "sm",
                "wrap": True,
                "margin": "xs"
            })
        return contents 