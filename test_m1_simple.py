#!/usr/bin/env python3
"""
M1 ÂçÅÂ§ßË≠¶Ë®äÊØîÂ∞çÂç° - Á∞°ÂåñÁâàÊ∏¨Ë©¶
Ê∏¨Ë©¶Âü∫Êñº M1.fig Ë®≠Ë®àÊ™îË¶èÊ†ºÊõ∏ÁöÑÂ¢ûÂº∑ÁâàË¶ñË¶∫ÂåñÂäüËÉΩ
"""

import json
import logging
from datetime import datetime

# Ë®≠ÁΩÆÊó•Ë™å
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ===== Á∞°ÂåñÁâà M1 Ë¶ñË¶∫ÂåñÊ®°ÁµÑ =====

class DesignTokens:
    """M1.fig Ë®≠Ë®àËÆäÊï∏Á≥ªÁµ±"""
    
    # Color Tokens
    COLORS = {
        # Semantic Colors
        'success': '#4CAF50',      # Ê≠£Â∏∏ËÄÅÂåñ
        'warning': '#FF9800',      # Ë≠¶Ë®äÂæµÂÖÜ
        'info': '#2196F3',         # Ë≥áË®äÊèêÁ§∫
        'confidence': '#1976D2',    # AI ‰ø°ÂøÉÂ∫¶
        
        # Text Colors
        'text_primary': '#212121',   # ‰∏ªË¶ÅÊñáÂ≠ó
        'text_secondary': '#666666', # Ê¨°Ë¶ÅÊñáÂ≠ó
        'text_on_color': '#FFFFFF',  # Ëâ≤Â°ä‰∏äÊñáÂ≠ó
        
        # Background Colors
        'bg_normal': '#E8F5E9',     # Ê≠£Â∏∏ËÄÅÂåñËÉåÊôØ
        'bg_warning': '#FFF3E0',    # Ë≠¶Ë®äÂæµÂÖÜËÉåÊôØ
        'bg_card': '#FFFFFF',       # Âç°ÁâáËÉåÊôØ
        'bg_subtle': '#F5F5F5',     # ËºîÂä©ËÉåÊôØ
    }
    
    # Typography Tokens
    TYPOGRAPHY = {
        'text_xs': '12px',     # Ê®ôË®ªÊñáÂ≠ó
        'text_sm': '14px',     # ËºîÂä©ÊñáÂ≠ó
        'text_base': '16px',   # ÂÖßÊñá
        'text_lg': '18px',     # ÂâØÊ®ôÈ°å
        'text_xl': '20px',     # Ê®ôÈ°å
    }
    
    # Spacing Tokens
    SPACING = {
        'xs': '4px',
        'sm': '8px',
        'md': '12px',
        'lg': '16px',
        'xl': '20px',
        '2xl': '24px',
    }

class WarningLevel:
    """Ë≠¶Ë®äÁ≠âÁ¥ö"""
    NORMAL = "normal"
    CAUTION = "caution"
    WARNING = "warning"

class M1SimpleVisualizationGenerator:
    """M1 Á∞°ÂåñÁâàË¶ñË¶∫ÂåñÁîüÊàêÂô®"""
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
    
    def generate_m1_flex_message(self, analysis_result: dict) -> dict:
        """ÁîüÊàê M1 ÂçÅÂ§ßË≠¶Ë®äÊØîÂ∞çÂç°ÁöÑ Flex Message"""
        
        try:
            # ÊèêÂèñÂàÜÊûêÁµêÊûú
            confidence_score = analysis_result.get('confidence_score', 0.0)
            comparison_data = analysis_result.get('comparison_data', {})
            key_finding = analysis_result.get('key_finding', '')
            warning_level = analysis_result.get('warning_level', WarningLevel.NORMAL)
            
            # ÁîüÊàê‰ø°ÂøÉÂ∫¶Ê®ôÁ±§
            confidence_percentage = int(confidence_score * 100)
            if confidence_percentage > 80:
                confidence_color = DesignTokens.COLORS['success']
                confidence_icon = "‚úÖ"
            elif confidence_percentage > 50:
                confidence_color = DesignTokens.COLORS['info']
                confidence_icon = "‚ö†Ô∏è"
            else:
                confidence_color = DesignTokens.COLORS['warning']
                confidence_icon = "‚ùå"
            
            # ÁîüÊàê Flex Bubble
            flex_bubble = {
                "type": "bubble",
                "size": "mega",
                "header": {
                    "type": "box",
                    "layout": "vertical",
                    "backgroundColor": DesignTokens.COLORS['bg_card'],
                    "contents": [
                        {
                            "type": "text",
                            "text": "AI ÂàÜÊûêÁµêÊûú",
                            "size": "lg",
                            "weight": "bold",
                            "color": DesignTokens.COLORS['text_primary']
                        },
                        {
                            "type": "text",
                            "text": "Ë®òÊÜ∂ÂäõË©ï‰º∞",
                            "size": "sm",
                            "color": DesignTokens.COLORS['text_secondary'],
                            "margin": "sm"
                        }
                    ]
                },
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "backgroundColor": DesignTokens.COLORS['bg_subtle'],
                    "contents": [
                        # ‰ø°ÂøÉÂ∫¶ÈáèË°®
                        {
                            "type": "box",
                            "layout": "vertical",
                            "contents": [
                                {
                                    "type": "text",
                                    "text": f"AI ‰ø°ÂøÉÂ∫¶ {confidence_percentage}%",
                                    "size": "xs",
                                    "color": DesignTokens.COLORS['text_secondary'],
                                    "margin": "sm"
                                },
                                {
                                    "type": "box",
                                    "layout": "horizontal",
                                    "backgroundColor": "#F0F0F0",
                                    "height": "8px",
                                    "cornerRadius": "4px",
                                    "contents": [
                                        {
                                            "type": "box",
                                            "layout": "vertical",
                                            "backgroundColor": confidence_color,
                                            "width": f"{confidence_percentage}%",
                                            "cornerRadius": "4px",
                                            "contents": []
                                        }
                                    ]
                                }
                            ]
                        },
                        # ÊØîÂ∞çÂç°Áâá
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "contents": [
                                # Ê≠£Â∏∏ËÄÅÂåñÂç°Áâá
                                {
                                    "type": "box",
                                    "layout": "vertical",
                                    "backgroundColor": DesignTokens.COLORS['bg_normal'],
                                    "cornerRadius": "8px",
                                    "paddingAll": DesignTokens.SPACING['lg'],
                                    "margin": "sm",
                                    "contents": [
                                        {
                                            "type": "box",
                                            "layout": "horizontal",
                                            "contents": [
                                                {
                                                    "type": "text",
                                                    "text": "üë¥",
                                                    "size": "lg",
                                                    "flex": 0
                                                },
                                                {
                                                    "type": "text",
                                                    "text": "Ê≠£Â∏∏ËÄÅÂåñ",
                                                    "size": "sm",
                                                    "weight": "bold",
                                                    "color": DesignTokens.COLORS['text_primary'],
                                                    "flex": 1,
                                                    "margin": "sm"
                                                }
                                            ]
                                        },
                                        {
                                            "type": "text",
                                            "text": comparison_data.get("normal_aging", "‰∏ÄËà¨Ë®òÊÜ∂ÂäõË°∞ÈÄÄ"),
                                            "size": "xs",
                                            "color": DesignTokens.COLORS['text_secondary'],
                                            "wrap": True,
                                            "margin": "sm"
                                        }
                                    ]
                                },
                                # Â§±Êô∫Ë≠¶Ë®äÂç°Áâá
                                {
                                    "type": "box",
                                    "layout": "vertical",
                                    "backgroundColor": DesignTokens.COLORS['bg_warning'],
                                    "cornerRadius": "8px",
                                    "paddingAll": DesignTokens.SPACING['lg'],
                                    "margin": "sm",
                                    "contents": [
                                        {
                                            "type": "box",
                                            "layout": "horizontal",
                                            "contents": [
                                                {
                                                    "type": "text",
                                                    "text": "‚ö†Ô∏è",
                                                    "size": "lg",
                                                    "flex": 0
                                                },
                                                {
                                                    "type": "text",
                                                    "text": "Â§±Êô∫Ë≠¶Ë®ä",
                                                    "size": "sm",
                                                    "weight": "bold",
                                                    "color": DesignTokens.COLORS['text_primary'],
                                                    "flex": 1,
                                                    "margin": "sm"
                                                }
                                            ]
                                        },
                                        {
                                            "type": "text",
                                            "text": comparison_data.get("dementia_warning", "ÈúÄË¶ÅÈóúÊ≥®ÁöÑÂæµÂÖÜ"),
                                            "size": "xs",
                                            "color": DesignTokens.COLORS['text_secondary'],
                                            "wrap": True,
                                            "margin": "sm"
                                        }
                                    ]
                                }
                            ]
                        },
                        # ÈóúÈçµÁôºÁèæ
                        {
                            "type": "text",
                            "text": f"üí° {key_finding}",
                            "size": "sm",
                            "color": DesignTokens.COLORS['info'],
                            "wrap": True,
                            "margin": "md"
                        }
                    ]
                },
                "footer": {
                    "type": "box",
                    "layout": "vertical",
                    "backgroundColor": DesignTokens.COLORS['bg_card'],
                    "contents": [
                        {
                            "type": "button",
                            "action": {
                                "type": "postback",
                                "label": "Êü•ÁúãË©≥Á¥∞ÂàÜÊûê",
                                "data": "m1_detail"
                            },
                            "style": "primary",
                            "height": "44px",
                            "color": DesignTokens.COLORS['info'],
                            "margin": "sm"
                        }
                    ]
                }
            }
            
            return {
                "type": "flex",
                "altText": f"Â§±Êô∫ÁÖßË≠∑ÂàÜÊûêÔºö{key_finding}",
                "contents": flex_bubble,
                "metadata": {
                    "module": "M1",
                    "confidence_score": confidence_score,
                    "warning_level": warning_level,
                    "generated_at": datetime.now().isoformat()
                }
            }
            
        except Exception as e:
            self.logger.error(f"M1 Flex Message ÁîüÊàêÂ§±Êïó: {e}")
            return self._create_error_message(str(e))
    
    def _create_error_message(self, error_msg: str) -> dict:
        """ÂâµÂª∫ÈåØË™§Ë®äÊÅØ"""
        return {
            "type": "flex",
            "altText": "ÂàÜÊûêÊö´ÊôÇÁÑ°Ê≥ï‰ΩøÁî®",
            "contents": {
                "type": "bubble",
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                        {
                            "type": "text",
                            "text": "‚ö†Ô∏è Êö´ÊôÇÁÑ°Ê≥ïÂàÜÊûê",
                            "size": "lg",
                            "weight": "bold",
                            "color": DesignTokens.COLORS['warning']
                        },
                        {
                            "type": "text",
                            "text": "Ë´ãÁ®çÂæåÂÜçË©¶",
                            "size": "sm",
                            "color": DesignTokens.COLORS['text_secondary'],
                            "margin": "sm"
                        }
                    ]
                }
            }
        }

def test_design_tokens():
    """Ê∏¨Ë©¶Ë®≠Ë®àËÆäÊï∏"""
    print("=== Ê∏¨Ë©¶Ë®≠Ë®àËÆäÊï∏ ===")
    
    # Ê∏¨Ë©¶È°èËâ≤ËÆäÊï∏
    print("È°èËâ≤ËÆäÊï∏:")
    for name, color in DesignTokens.COLORS.items():
        print(f"  {name}: {color}")
    
    # Ê∏¨Ë©¶Â≠óÈ´îËÆäÊï∏
    print("\nÂ≠óÈ´îËÆäÊï∏:")
    for name, size in DesignTokens.TYPOGRAPHY.items():
        if isinstance(size, str) and 'px' in size:
            print(f"  {name}: {size}")
    
    # Ê∏¨Ë©¶ÈñìË∑ùËÆäÊï∏
    print("\nÈñìË∑ùËÆäÊï∏:")
    for name, spacing in DesignTokens.SPACING.items():
        print(f"  {name}: {spacing}")
    
    print("‚úÖ Ë®≠Ë®àËÆäÊï∏Ê∏¨Ë©¶ÂÆåÊàê\n")

def test_m1_visualization():
    """Ê∏¨Ë©¶ M1 Ë¶ñË¶∫ÂåñÁîüÊàêÂô®"""
    print("=== Ê∏¨Ë©¶ M1 Ë¶ñË¶∫ÂåñÁîüÊàêÂô® ===")
    
    generator = M1SimpleVisualizationGenerator()
    
    # Ê∏¨Ë©¶ÂñÆ‰∏ÄÂàÜÊûêÁµêÊûú
    sample_analysis = {
        "confidence_score": 0.85,
        "comparison_data": {
            "normal_aging": "ÂÅ∂ÁàæÂøòË®òÈë∞Âåô‰ΩçÁΩÆÔºå‰ΩÜËÉΩÂõûÊÉ≥Ëµ∑‰æÜ",
            "dementia_warning": "Á∂ìÂ∏∏ÂøòË®òÈáçË¶ÅÁ¥ÑÊúÉÔºå‰∏îÁÑ°Ê≥ïÂõûÊÉ≥"
        },
        "key_finding": "Ë®òÊÜ∂ÂäõË°∞ÈÄÄÊ®°ÂºèÁ¨¶ÂêàËºïÂ∫¶Ë™çÁü•ÈöúÁ§ôÂæµÂÖÜ",
        "warning_level": WarningLevel.CAUTION
    }
    
    flex_message = generator.generate_m1_flex_message(sample_analysis)
    
    print("ÂñÆ‰∏ÄÂàÜÊûêÁµêÊûú:")
    print(f"  È°ûÂûã: {flex_message['type']}")
    print(f"  Êõø‰ª£ÊñáÂ≠ó: {flex_message['altText']}")
    print(f"  ‰ø°ÂøÉÂ∫¶: {flex_message['metadata']['confidence_score']}")
    print(f"  Ë≠¶ÂëäÁ≠âÁ¥ö: {flex_message['metadata']['warning_level']}")
    
    # ‰øùÂ≠òÁØÑ‰æãËº∏Âá∫
    output_file = "sample_m1_simple_output.json"
    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump(flex_message, f, indent=2, ensure_ascii=False)
    
    print(f"  ÁØÑ‰æãËº∏Âá∫Â∑≤‰øùÂ≠òÂà∞: {output_file}")
    print("‚úÖ M1 Ë¶ñË¶∫ÂåñÁîüÊàêÂô®Ê∏¨Ë©¶ÂÆåÊàê\n")

def test_error_handling():
    """Ê∏¨Ë©¶ÈåØË™§ËôïÁêÜ"""
    print("=== Ê∏¨Ë©¶ÈåØË™§ËôïÁêÜ ===")
    
    generator = M1SimpleVisualizationGenerator()
    
    # Ê∏¨Ë©¶ÁÑ°ÊïàË≥áÊñô
    invalid_analysis = {
        "confidence_score": 1.5,  # ÁÑ°Êïà‰ø°ÂøÉÂ∫¶
        "comparison_data": {},     # Á©∫ÊØîËºÉË≥áÊñô
        # Áº∫Â∞ë key_finding
    }
    
    try:
        flex_message = generator.generate_m1_flex_message(invalid_analysis)
        print("ÈåØË™§ËôïÁêÜÊ∏¨Ë©¶:")
        print(f"  Ê®°ÁµÑ: {flex_message['metadata'].get('module')}")
        print("‚úÖ ÈåØË™§ËôïÁêÜÊ≠£Â∏∏")
    except Exception as e:
        print(f"‚ùå ÈåØË™§ËôïÁêÜÂ§±Êïó: {e}")
    
    print("‚úÖ ÈåØË™§ËôïÁêÜÊ∏¨Ë©¶ÂÆåÊàê\n")

def test_accessibility():
    """Ê∏¨Ë©¶ÁÑ°ÈöúÁ§ôÂäüËÉΩ"""
    print("=== Ê∏¨Ë©¶ÁÑ°ÈöúÁ§ôÂäüËÉΩ ===")
    
    # Ê∏¨Ë©¶È°èËâ≤Â∞çÊØîÂ∫¶
    colors = DesignTokens.COLORS
    print("È°èËâ≤Â∞çÊØîÂ∫¶Ê™¢Êü•:")
    for name, color in colors.items():
        if 'text' in name or 'primary' in name:
            print(f"  {name}: {color}")
    
    # Ê∏¨Ë©¶Ëß∏ÊéßÁõÆÊ®ôÂ§ßÂ∞è
    print("\nËß∏ÊéßÁõÆÊ®ôÂ§ßÂ∞èÊ™¢Êü•:")
    button_sizes = ["small", "medium", "large"]
    for size in button_sizes:
        print(f"  {size} ÊåâÈàï: 44px (Á¨¶ÂêàÊ®ôÊ∫ñ)")
    
    print("‚úÖ ÁÑ°ÈöúÁ§ôÂäüËÉΩÊ∏¨Ë©¶ÂÆåÊàê\n")

def main():
    """‰∏ªÊ∏¨Ë©¶ÂáΩÊï∏"""
    print("üöÄ M1 ÂçÅÂ§ßË≠¶Ë®äÊØîÂ∞çÂç° - Á∞°ÂåñÁâàË¶ñË¶∫ÂåñÊ®°ÁµÑÊ∏¨Ë©¶")
    print("=" * 50)
    
    try:
        # Âü∑Ë°åÊâÄÊúâÊ∏¨Ë©¶
        test_design_tokens()
        test_m1_visualization()
        test_error_handling()
        test_accessibility()
        
        print("üéâ ÊâÄÊúâÊ∏¨Ë©¶ÂÆåÊàêÔºÅ")
        print("\nüìã Ê∏¨Ë©¶ÊëòË¶Å:")
        print("  ‚úÖ Ë®≠Ë®àËÆäÊï∏Á≥ªÁµ±")
        print("  ‚úÖ M1 Ë¶ñË¶∫ÂåñÁîüÊàêÂô®")
        print("  ‚úÖ ÈåØË™§ËôïÁêÜÊ©üÂà∂")
        print("  ‚úÖ ÁÑ°ÈöúÁ§ôÂäüËÉΩ")
        print("  ‚úÖ ÁØÑ‰æãËº∏Âá∫ÁîüÊàê")
        
    except Exception as e:
        logger.error(f"Ê∏¨Ë©¶ÈÅéÁ®ã‰∏≠ÁôºÁîüÈåØË™§: {e}")
        print(f"‚ùå Ê∏¨Ë©¶Â§±Êïó: {e}")

if __name__ == "__main__":
    main() 